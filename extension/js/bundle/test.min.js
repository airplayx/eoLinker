webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var PUBLIC_FILE = exports.PUBLIC_FILE = {};
var PRODUCT_INFO = exports.PRODUCT_INFO = {};
var CACHE = exports.CACHE = {};

var COMMON_FILE = exports.COMMON_FILE = {
    getFile: function getFile(fileName, fileUrl) {
        var oReq = new XMLHttpRequest();
        var blob = new Blob();
        oReq.open("get", fileUrl, true);
        oReq.onload = reqListener;
        oReq.responseType = "blob";
        oReq.send();

        function reqListener() {
            blob = this.response;
            var fileArray = {
                png: {
                    name: 'img_png.png'
                },
                jpg: {
                    name: 'img_jpg.jpg'
                },
                gif: {
                    name: 'img_gif.gif'
                },
                txt: {
                    name: 'file_txt.txt'
                },
                pdf: {
                    name: 'pdf.pdf'
                },
                doc: {
                    name: 'doc.doc'
                },
                docx: {
                    name: 'docx.docx'
                },
                none: {
                    name: 'file_none'
                }
            };
            blob.name = fileArray[fileName].name;
            COMMON_FILE[fileName] = blob;
            return blob;
        }
    },

    getAllFile: function getAllFile() {
        this.getFile('txt', window.location.origin + '/files/test_files/file_txt.txt');
        this.getFile('none', window.location.origin + '/files/test_files/file_none');
        this.getFile('jpg', window.location.origin + '/files/test_imgs/img_jpg.jpg');
        this.getFile('png', window.location.origin + '/files/test_imgs/img_png.png');
        this.getFile('gif', window.location.origin + '/files/test_imgs/img_gif.gif');
        this.getFile('pdf', window.location.origin + '/files/test_files/pdf.pdf');
        this.getFile('docx', window.location.origin + '/files/test_files/docx.docx');
        this.getFile('doc', window.location.origin + '/files/test_files/doc.doc');
    }
};

if (!COMMON_FILE.txt) {
    COMMON_FILE.getAllFile();
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.COMMON_TOOLS = undefined;

var _assign = __webpack_require__(10);

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = __webpack_require__(21);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = __webpack_require__(22);

var _entries2 = _interopRequireDefault(_entries);

var _keys = __webpack_require__(26);

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = __webpack_require__(27);

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = __webpack_require__(3);

var _stringify2 = _interopRequireDefault(_stringify);

var _constant = __webpack_require__(6);

var _cache = __webpack_require__(8);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMMON_TOOLS = exports.COMMON_TOOLS = {
    eoStringify: function eoStringify(str) {
        if (typeof str != 'string') {
            return (0, _stringify2.default)(str);
        }
        return str;
    },
    resetProductInfo: function resetProductInfo(productType, version) {
        switch (productType) {
            case '0':
                {
                    _cache.PRODUCT_INFO.productName = 'os', _cache.PRODUCT_INFO.lang = 'en';
                    break;
                }
            case '5':
                {
                    _cache.PRODUCT_INFO.productName = 'webEn', _cache.PRODUCT_INFO.lang = 'en';
                    break;
                }
            case '2':
                {
                    _cache.PRODUCT_INFO.productName = 'independent', _cache.PRODUCT_INFO.lang = 'cn';
                    break;
                }
            case '3':
                {
                    _cache.PRODUCT_INFO.productName = 'apinto', _cache.PRODUCT_INFO.lang = 'cn';
                    break;
                }
            case '4':
                {
                    _cache.PRODUCT_INFO.productName = 'apishop', _cache.PRODUCT_INFO.lang = 'cn';
                    break;
                }
            default:
                {
                    _cache.PRODUCT_INFO.productName = 'webCn', _cache.PRODUCT_INFO.lang = 'cn';
                }

        }
        _cache.PRODUCT_INFO.version = version;
    },
    replaceAll: function replaceAll(origin, replace, string) {
        if ((typeof string === 'undefined' ? 'undefined' : (0, _typeof3.default)(string)) == 'object') {
            string = (0, _stringify2.default)(string);
            while ((string || '').toString().indexOf(origin) != -1) {
                string = string.replace(origin, replace);
            }
            string = JSON.parse(string);
        } else {
            while ((string || '').toString().indexOf(origin) != -1) {
                string = string.replace(origin, replace);
            }
        }
        return string;
    },
    eoTypeof: function eoTypeof(object) {
        var tf = typeof object === 'undefined' ? 'undefined' : (0, _typeof3.default)(object),
            ts = Object.prototype.toString.call(object);
        return null === object ? 'Null' : 'undefined' == tf ? 'Undefined' : 'boolean' == tf ? 'Boolean' : 'number' == tf ? 'Number' : 'string' == tf ? 'String' : '[object Function]' == ts ? 'Function' : '[object Array]' == ts ? 'Array' : '[object Date]' == ts ? 'Date' : 'Object';
    },
    eoLength: function eoLength(object, objType) {
        if (!objType) objType = COMMON_TOOLS.eoTypeof(object);
        switch (objType) {
            case "Object":
                {
                    return (0, _keys2.default)(object).length;
                }
            case "Null":
            case "Undefined":
                {
                    return undefined;
                }
            default:
                {
                    return object.length;
                }
        }
    },
    judgeRequestMethod: function judgeRequestMethod(methodId) {
        var method = "POST";
        switch (methodId.toString()) {
            case '1':
                method = "GET";
                break;
            case '2':
                method = "PUT";
                break;
            case '3':
                method = "DELETE";
                break;
            case '4':
                method = "HEAD";
                break;
            case '5':
                method = "OPTIONS";
                break;
            case '6':
                method = "PATCH";
                break;
            default:
                method = "POST";
        }
        return method;
    },
    handleErrorReason: function handleErrorReason(arg) {

        if (_cache.PRODUCT_INFO.productName == 'independent' && _cache.PRODUCT_INFO.version >= '4.1.7') {
            arg.errorReasonObj = arg.errorReason;
        } else {
            if ((0, _typeof3.default)(arg.errorReason) == 'object') {
                arg.errorReasonObj = arg.errorReasonObj.concat(arg.errorReason);
            } else {
                arg.errorReasonObj.push(arg.errorReason);
            }
        }
        return arg.errorReasonObj;
    },
    isNum: function isNum(s) {
        if (s != null && s !== "") {
            return !isNaN(s);
        }
        return false;
    },
    judgeResponseHeaders: function judgeResponseHeaders(arg) {
        var isMatch = true;

        if (arg.headerType) {
            for (var key = 0; key < arg.headerRule.length; key++) {
                var val = arg.headerRule[key];
                if (!val.headerName) continue;
                var trueHeaderValue = arg.responseHeaders[val.headerName.toLowerCase()];
                val.headerName = COMMON_TOOLS.evalBindParam(val.headerName, arg.response, arg.allResponseHeaders);
                val.headerValue = COMMON_TOOLS.evalBindParam(val.headerValue, arg.response, arg.allResponseHeaders);
                if (!(val.headerName.toLowerCase() in arg.responseHeaders) && val.checkExist == '1') {
                    isMatch = false;
                    arg.callback(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.ResponseHeaderMatch.noExist[_cache.PRODUCT_INFO.lang], [val.headerName]));
                    continue;
                }
                switch (val.matchRule.toString()) {
                    case '0':
                        {
                            break;
                        }
                    case '1':
                        {
                            if (val.headerValue != trueHeaderValue) {
                                isMatch = false;
                                arg.callback(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.ResponseHeaderMatch.equal[_cache.PRODUCT_INFO.lang], [val.headerName, val.headerValue, trueHeaderValue]));
                            }
                            break;
                        }
                    case '2':
                        {
                            if (val.headerValue == trueHeaderValue) {
                                isMatch = false;
                                arg.callback(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.ResponseHeaderMatch.notEqual[_cache.PRODUCT_INFO.lang], [val.headerName, val.headerValue, trueHeaderValue]));
                            }
                            break;
                        }

                }
                if (isMatch == false && !arg.judgeSetting) {
                    break;
                }
            }
        }
        return isMatch;
    },
    selfLoopMatchJson: function selfLoopMatchJson(arrMatchList, response, isJudgeAll, allResponse, allResponseHeader, jsonResultVerification) {
        isJudgeAll = isJudgeAll || false;
        jsonResultVerification = jsonResultVerification || {};
        var errorReason = [];

        function excuteLoopFun(arg) {

            arg.response = arg.response || {};
            switch (arg.objType) {
                case "Array":
                    {

                        if (arg.isLoop == "0") {
                            arg.fun(arg.arrMatchList, arg.response[0]);
                        } else {
                            arg.response.forEach(function (val, key) {
                                arg.fun(arg.arrMatchList, arg.response[key]);
                            });
                        }
                        break;
                    }
                default:
                    {

                        arg.fun(arg.arrMatchList, arg.response);
                    }
            }
        }
        if (Object.prototype.toString.call(response).toLowerCase() == "[object array]" || (typeof response === 'undefined' ? 'undefined' : (0, _typeof3.default)(response)) == "object" && Object.prototype.toString.call(response).toLowerCase() == "[object object]") {
            if (Object.prototype.toString.call(response).toLowerCase() == "[object array]" && jsonResultVerification.resultType == '0') {
                return {
                    isMatch: false,
                    errorReason: [_constant.CONSTANT.LANG.JsonMatch.rootObjectError[_cache.PRODUCT_INFO.lang]]
                };
            } else if ((typeof response === 'undefined' ? 'undefined' : (0, _typeof3.default)(response)) == "object" && Object.prototype.toString.call(response).toLowerCase() == "[object object]" && jsonResultVerification.resultType == '1') {
                return {
                    isMatch: false,
                    errorReason: [_constant.CONSTANT.LANG.JsonMatch.rootArrayError[_cache.PRODUCT_INFO.lang]]
                };
            } else if (arrMatchList.length == 0 || !arrMatchList[0].paramKey || arrMatchList == null) {
                return {
                    isMatch: true,
                    errorReason: errorReason
                };
            } else {
                var isInt = function isInt(n) {
                    return n % 1 === 0;
                };

                var judgeMatchRule = function judgeMatchRule(arrMatch, matchResult, trueResult) {
                    var matchEotype, trueEotype;
                    var isMatch = true;
                    trueEotype = COMMON_TOOLS.eoTypeof(trueResult, true);
                    switch (Number(arrMatch.paramType)) {
                        case 1:
                            {

                                matchEotype = "Int";
                                break;
                            }

                        case 2:
                            {
                                matchEotype = "Boolean";
                                break;
                            }
                        case 3:
                            {

                                matchEotype = "Float";
                                break;
                            }
                        case 4:
                            {
                                matchEotype = "Array";
                                break;
                            }

                        case 5:
                            {
                                matchEotype = "Object";
                                break;
                            }
                        case 6:
                            {
                                matchEotype = "Null";
                                break;
                            }
                        case 7:
                            {
                                matchEotype = "Number";
                                break;
                            }
                        default:
                            {
                                matchEotype = "String";
                            }
                    }
                    switch (trueEotype) {
                        case "Number":
                            {
                                break;
                            }
                        case "Boolean":
                            {
                                if (matchEotype == 'Boolean') {
                                    matchResult = COMMON_TOOLS.eoStringify(matchResult).toLowerCase();
                                }
                                break;
                            }
                        case "Null":
                            {
                                matchResult = matchResult || "null";
                                break;
                            }
                    }
                    switch (matchEotype) {
                        case "String":
                            {
                                break;
                            }
                        default:
                            {
                                try {
                                    matchResult = JSON.parse(matchResult);
                                } catch (e) {}
                            }
                    }
                    if (arrMatch.checkParamType == '1') {
                        if (matchEotype == 'Int' || matchEotype == 'Float') {
                            trueEotype = trueEotype == 'Number' ? isInt(trueResult) ? "Int" : "Float" : trueEotype;
                        }
                        if (matchEotype != trueEotype) {
                            isMatch = false;
                            errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.unMatchType[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, matchEotype, trueEotype]));
                            return {
                                isMatch: false,
                                matchEotype: matchEotype,
                                trueEotype: trueEotype,
                                matchResult: matchResult,
                                trueResult: trueResult
                            };
                        }
                    }
                    return {
                        isMatch: true,
                        matchEotype: matchEotype,
                        trueEotype: trueEotype,
                        matchResult: matchResult,
                        trueResult: trueResult
                    };
                };

                var judgeMatchValue = function judgeMatchValue(regular, arrMatch, matchEotype, trueEotype, matchResult, trueResult) {
                    var trueResultLen = COMMON_TOOLS.eoLength(trueResult, trueEotype),
                        isMatch = true,
                        midMatchResult = COMMON_TOOLS.eoStringify(matchResult),
                        midTrueResult = COMMON_TOOLS.eoStringify(trueResult),
                        reportMatchResult = matchEotype == "String" ? '"' + midMatchResult + '"' : midMatchResult,
                        reportTrueResult = trueEotype == "String" ? '"' + midTrueResult + '"' : midTrueResult;

                    switch (Number(regular)) {
                        case 1:
                            {
                                if ((matchEotype == 'Object' || matchEotype == 'Array') && (trueEotype == 'Object' || trueEotype == 'Array')) {
                                    matchResult = midMatchResult;
                                    trueResult = midTrueResult;
                                }

                                if (trueResult !== matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.equal[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, reportTrueResult]));
                                }
                                break;
                            }
                        case 2:
                            {
                                if ((matchEotype == 'Object' || matchEotype == 'Array') && (trueEotype == 'Object' || trueEotype == 'Array')) {
                                    matchResult = midMatchResult;
                                    trueResult = midTrueResult;
                                }

                                if (trueResult === matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.notEqual[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, reportTrueResult]));
                                }
                                break;
                            }
                        case 3:
                            {

                                if (trueResult <= matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.greater[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, reportTrueResult]));
                                }
                                break;
                            }
                        case 4:
                            {

                                if (trueResult >= matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.less[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, reportTrueResult]));
                                }
                                break;
                            }
                        case 5:
                            {

                                try {
                                    var patt = new RegExp(matchResult);
                                    if (!patt.test(trueResult)) {
                                        isMatch = false;
                                        errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.patt[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, reportTrueResult]));
                                    }
                                } catch (e) {
                                    isMatch = false;
                                    errorReason.push((LANG == 'cn' ? '字段' : 'The field') + arrMatch.paramKey + _constant.CONSTANT.LANG.PattError[_cache.PRODUCT_INFO.lang]);
                                }
                                break;
                            }
                        case 6:
                            {
                                if (trueResultLen != matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.lengthEqual[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, trueResultLen]));
                                }

                                break;
                            }
                        case 7:
                            {

                                if (trueResultLen == matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.lengthNotEqual[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, trueResultLen]));
                                }
                                break;
                            }
                        case 8:
                            {

                                if (trueResultLen <= matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.lengthGreater[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, trueResultLen]));
                                }
                                break;
                            }
                        case 9:
                            {

                                if (trueResultLen >= matchResult) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.lengthLess[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, trueResultLen]));
                                }
                                break;
                            }
                        case 10:
                            {

                                if (!midTrueResult.includes(midMatchResult)) {
                                    isMatch = false;
                                    errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.include[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey, reportMatchResult, reportTrueResult]));
                                }
                                break;
                            }
                        default:
                            {}
                    }
                    return isMatch;
                };

                var isMatchAll = true;
                var loopFun = function loopFun(arrMatchList, response) {
                    for (var i = 0; i < arrMatchList.length; i++) {
                        if (!isMatchAll && !isJudgeAll) return;
                        var isMatch = true;
                        var arrMatch = arrMatchList[i];
                        if (!arrMatch.paramKey) break;
                        arrMatch.paramKey = COMMON_TOOLS.evalBindParam(arrMatch.paramKey, allResponse, allResponseHeader);
                        arrMatch.paramInfo = COMMON_TOOLS.evalBindParam(arrMatch.paramInfo || '', allResponse, allResponseHeader);

                        var regular = arrMatch.matchRule;
                        var matchResult, trueResult;
                        matchResult = arrMatch.paramInfo;
                        arrMatch.checkExist = arrMatch.checkExist != undefined ? arrMatch.checkExist : '1';
                        if ((!response || !(arrMatch.paramKey.toString() in response)) && arrMatch.checkExist == '1') {
                            isMatch = isMatchAll = false;
                            errorReason.push(COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.JsonMatch.noExist[_cache.PRODUCT_INFO.lang], [arrMatch.paramKey.toString()]));
                            continue;
                        }
                        if (response) {
                            trueResult = response[arrMatch.paramKey];
                        } else {
                            trueResult = undefined;
                        }
                        arrMatch.checkParamType = arrMatch.checkParamType != undefined ? arrMatch.checkParamType : _cache.PRODUCT_INFO.productName == 'independent' ? '1' : '0';
                        var typeFunResult = judgeMatchRule(arrMatch, matchResult, trueResult);
                        if (!typeFunResult.isMatch) {
                            isMatch = isMatchAll = false;
                            continue;
                        } else {
                            if (!judgeMatchValue(regular, arrMatch, typeFunResult.matchEotype, typeFunResult.trueEotype, typeFunResult.matchResult, typeFunResult.trueResult)) {
                                isMatch = isMatchAll = false;
                            }
                        }
                        if (!isMatchAll && !isJudgeAll) return;
                        if (arrMatch.childList && arrMatch.childList.length > 0) {
                            var result = {};
                            var data = {};
                            if (response) {
                                data = response[arrMatch.paramKey];
                            } else {
                                data = undefined;
                            }
                            excuteLoopFun({
                                response: data,
                                arrMatchList: arrMatch.childList,
                                objType: arrMatch.paramType == 4 ? "Array" : "Object",
                                isLoop: arrMatch.isLoop || "0",
                                fun: loopFun
                            });
                        }
                    }
                    return;
                };
                excuteLoopFun({
                    response: response,
                    arrMatchList: arrMatchList,
                    objType: jsonResultVerification.resultType == "1" ? "Array" : "Object",
                    isLoop: jsonResultVerification.matchRule || "0",
                    fun: loopFun
                });
                if (errorReason.length > 0) {
                    return {
                        isMatch: false,
                        errorReason: errorReason
                    };
                } else {
                    return {
                        isMatch: true,
                        errorReason: ''
                    };
                }
            }
        } else {
            return {
                isMatch: false,
                errorReason: [_constant.CONSTANT.LANG.JsonMatch.notJson[_cache.PRODUCT_INFO.lang]]
            };
        }
    },
    paramConstructor: function paramConstructor(value) {
        this.base64 = function () {
            value = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(value));
            return this;
        };
        this.length = function () {
            value = value.length;
            return this;
        };
        this.hmac = function (cipher, secret, output) {
            value = CryptoJS['Hmac' + cipher](value, secret || '');
            if (output == 'Base64') {
                value = CryptoJS.enc.Base64.stringify(value);
            } else {
                value = CryptoJS.enc.Hex.stringify(value);
            }
            return this;
        };
        this.sha = function (cipher, output) {
            value = CryptoJS[cipher](value);
            if (output == 'Base64') {
                value = CryptoJS.enc.Base64.stringify(value);
            } else {
                value = CryptoJS.enc.Hex.stringify(value);
            }
            return this;
        };
        this.string = function (quotes) {
            value = quotes + value + quotes;
            return this;
        };
        this.concat = function (str) {
            value = value + str;
            return this;
        };
        this.upper = function () {
            value = value.toUpperCase();
            return this;
        };
        this.lower = function () {
            value = value.toLowerCase();
            return this;
        };
        this.md5 = function () {
            value = CryptoJS.enc.Hex.stringify(CryptoJS.MD5(value.toString()));
            return this;
        };
        this.substring = function (start, end) {
            value = value.toString().substring(start, end);
            return this;
        };
        this.valueOf = function () {
            return value;
        };
        return this;
    },
    evalBindParam: function evalBindParam(bindVal, response, responseheaders) {

        var template = {
            output: bindVal,
            match: [],
            bindMatch: []
        };

        function evalParam(value) {
            var templateInside = {
                output: value,
                fun: function fun(mark, query) {
                    query.map(function (val, key) {
                        var replaceString = 'NULL';
                        try {
                            replaceString = eval(mark == 'responseHeader' ? val.substring(1, val.length - 1).toLowerCase() : val.substring(1, val.length - 1));
                            if (typeof replaceString != 'string') {
                                replaceString = (0, _stringify2.default)(replaceString);
                            }
                            if (replaceString === undefined) {
                                replaceString = 'NULL';
                            }
                        } catch (e) {
                            replaceString = 'NULL';
                        }
                        templateInside.output = COMMON_TOOLS.replaceAll('.' + val + '.', replaceString, templateInside.output);
                        templateInside.output = COMMON_TOOLS.replaceAll('.' + val, replaceString, templateInside.output);
                        templateInside.output = COMMON_TOOLS.replaceAll(val + '.', replaceString, templateInside.output);
                        templateInside.output = COMMON_TOOLS.replaceAll(val, replaceString, templateInside.output);
                    });
                    return;
                }
            };
            templateInside.fun('responseHeader', (value || '').trim().match(/(<responseHeaders[.\[])((?!(>)).)*(>)/g) || []);
            templateInside.fun('response', (value || '').trim().match(/(<response[.\[])((?!(>)).)*(>)/g) || []);
            return templateInside.output;
        }

        function bind(val) {
            return COMMON_TOOLS.paramConstructor(val);
        }
        template.output = evalParam(template.output);
        template.bindMatch = (template.output || '').trim().match(/(\$(\s)*{)((?!(\)})).)*(\)(\s)*})/g);
        if (template.bindMatch) {
            template.bindMatch.map(function (val, key) {
                try {
                    var replaceString = eval(val.substring(2, val.length - 1) + ".valueOf()");
                    template.output = COMMON_TOOLS.replaceAll('.' + val + '.', replaceString, template.output);
                    template.output = COMMON_TOOLS.replaceAll('.' + val, replaceString, template.output);
                    template.output = COMMON_TOOLS.replaceAll(val + '.', replaceString, template.output);
                    template.output = COMMON_TOOLS.replaceAll(val, replaceString, template.output);
                } catch (e) {
                    console.log(val, e);
                }
            });
        }
        return template.output;
    },
    handleTime: function handleTime(testTime) {
        var Y, M, D, h, m, s;
        Y = testTime.getFullYear() + '-';
        M = (testTime.getMonth() + 1 < 10 ? '0' + (testTime.getMonth() + 1) : testTime.getMonth() + 1) + '-';
        D = testTime.getDate() + ' ';
        h = testTime.getHours() + ':';
        m = testTime.getMinutes() + ':';
        s = testTime.getSeconds();
        testTime = Y + M + D + h + m + s;
        return testTime;
    },
    sortArray: function sortArray(item1, item2) {
        if (item1.key > item2.key) return 1;else if (item1.key === item2.key) return 0;else return -1;
    },
    handleHeader: function handleHeader(headers) {
        var temHeader = {};
        headers.forEach(function (header) {
            header.name = header.name.toLowerCase();
            if (header.name in temHeader) {
                temHeader[header.name] = temHeader[header.name] + ";" + header.value;
            } else {
                temHeader[header.name] = header.value;
            }
        });
        return temHeader;
    },
    abortAll: function abortAll(ajaxs) {
        $.each(ajaxs, function (i, ajax) {
            if (ajax) {
                ajax.abort();
            }
        });
    },
    base64url: function base64url(str) {
        var encodedSource = CryptoJS.enc.Base64.stringify(str);
        var reg = new RegExp('/', 'g');
        encodedSource = encodedSource.replace(/=+$/, '').replace(/\+/g, '-').replace(reg, '_');
        return encodedSource;
    },
    postError: function postError(arg) {
        switch (arg.type) {
            case 'normal':
                {
                    arg.data.error = true;
                    var backData = {
                        statusCode: "210001",
                        type: "plug",
                        errorText: arg.errorReason
                    };
                    backData = (0, _stringify2.default)(backData);
                    arg.connect.postMessage({
                        backResult: backData
                    });
                    break;
                }
            case 'batch':
                {
                    arg.data.error = true;
                    var index = 0;
                    if (arg.webInfo.index != 0) {
                        index = arg.webInfo.index - 1;
                    } else {
                        index = arg.k;
                    }
                    arg.eoData.nowApiCount++;

                    arg.errorRequestFlagArr[index] = 1;
                    arg.backResult.responseList[index] = {
                        general: {
                            requestUrl: arg.url,
                            requestMethod: arg.data.method,
                            statusCode: 0
                        },
                        isStopTest: true,
                        requestHeaders: arg.allRequestHeaders[arg.k],
                        requestBody: {
                            requestType: arg.request.requestType,
                            body: arg.report.params
                        },
                        responseType: 'error',
                        errorReason: arg.errorReason
                    };
                    arg.connect.postMessage(arg.backResult);
                    break;
                }
            case 'auto':
                {
                    var caseListID = 0;
                    if (arg.caseListIndex != 0) {
                        caseListID = arg.caseListIndex - 1;
                    } else {
                        caseListID = arg.k;
                    }
                    arg.caseData[arg.k].responseHeaderVerification = arg.caseData[arg.k].responseHeaderVerification || {};
                    arg.backResult.reportStatus = 'error';
                    arg.backResult.time = new Date() - arg.startTime + 'ms';
                    arg.backResult.responseList[caseListID] = {
                        apiIndex: caseListID,
                        isStopTest: true,
                        connID: arg.caseData[arg.k].connID,
                        general: {
                            time: arg.testDeny + 'ms',
                            requestUrl: arg.url,
                            requestMethod: arg.data.method,
                            statusCode: 0,
                            name: arg.caseData[arg.k].apiName,
                            match: {
                                keepGoing: arg.data.keepGoing,
                                jsonResultVerification: arg.caseData[arg.k].jsonResultVerification,
                                rule: arg.caseData[arg.k].matchRule,
                                type: arg.caseData[arg.k].matchType,
                                headerRule: arg.caseData[arg.k].responseHeaderVerification.matchRule || [],
                                headerType: arg.caseData[arg.k].responseHeaderVerification.matchType,
                                statusCode: arg.caseData[arg.k].statusCode
                            }
                        },
                        responseHeaders: arg.responseHeader || null,
                        requestHeaders: (0, _stringify2.default)(arg.request.requestHeaders) == '{}' ? null : arg.request.requestHeaders,
                        requestBody: {
                            requestType: arg.report.requestType,
                            body: arg.report.params
                        },
                        response: arg.response || '',
                        errorReason: arg.errorReason,
                        responseType: arg.responseType || 'error'
                    };
                    break;
                }
            case 'autoCode':
                {
                    throw 'ignore';
                }
        }
    },
    handleTip: function handleTip(tips, placeHolder) {
        placeHolder = placeHolder || [];
        placeHolder.forEach(function (value, key) {
            tips = tips.replace('[placeholder' + key + ']', value);
        });
        return tips;
    },
    setCookieObj: function setCookieObj(arg) {
        if (arg.cookies) {
            var cookiesArr = arg.cookies.split(";");
            var cookieLen = cookiesArr.length;
            cookiesArr.forEach(function (cookie, key) {
                var singleCookie = cookie.trim().split("=");
                try {
                    var name = singleCookie[0];
                    var value = [singleCookie[1] || ''].join("=");
                    chrome.cookies.set({
                        url: arg.url,
                        name: name,
                        value: value
                    });
                } catch (e) {
                    console.log("831 : setCookieObj" + e);
                }
            });
        }
    },
    getCookieObj: function getCookieObj(value) {
        var cookieObj = {};
        var items = value.split(";");
        for (var i = 0; i < items.length; i++) {
            var item = items[i].split("=");

            if (item[0]) {
                cookieObj[item[0].trim()] = item[1] || "";
            }
        }
        return cookieObj;
    },
    jointCookieObj: function jointCookieObj(arg) {
        var output = '';
        var entries = _entries2.default;

        if (arg.type == 'array') {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(entries(arg.cookies)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                    var key = _ref2[0];
                    var cookie = _ref2[1];

                    output += cookie.name + '=' + cookie.value + ';';
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        } else {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = (0, _getIterator3.default)(entries(arg.cookies)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _ref3 = _step2.value;

                    var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

                    var _key = _ref4[0];
                    var value = _ref4[1];

                    output += _key + '=' + value + ';';
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }

        return output;
    },
    replaceCookieStr: function replaceCookieStr(oldCookie, newCookie) {
        var oldCookieObj = COMMON_TOOLS.getCookieObj(oldCookie);
        var newCookieObj = COMMON_TOOLS.getCookieObj(newCookie);
        var output = COMMON_TOOLS.jointCookieObj({
            cookies: (0, _assign2.default)(oldCookieObj, newCookieObj),
            type: 'object'
        });
        return output;
    }
};

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(81), __esModule: true };

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TRANS = undefined;

var _commonUtils = __webpack_require__(9);

var _cache = __webpack_require__(8);

var TRANS = exports.TRANS = {
    normalTest: null,
    batchTest: null,
    autoUiTest: null,
    autoCodeTest: null,
    ajaxs: [],
    disconnect: {},
    fun: {
        handleRequestHeaders: null,
        getResponseHeaders: null
    },
    stopStatus: false
};

function listener(content, which) {
    _commonUtils.COMMON_TOOLS.resetProductInfo(content.productType, content.version);
    _cache.CACHE.COMMON_FUNCTION = content.commonFunList;
    TRANS.disconnect[which.name] = false;
    TRANS.stopStatus = false;
    if (!content.stopStatus) {
        TRANS[which.name](content, which);
    } else {
        _commonUtils.COMMON_TOOLS.abortAll(TRANS.ajaxs);
        TRANS.ajaxs = [];
        TRANS.stopStatus = true;
    }
}
chrome.runtime.onConnect.addListener(function (which) {
    var name = which.name;
    which.onMessage.addListener(listener);
    which.onDisconnect.addListener(function (arg) {
        TRANS.disconnect[name] = true;
    });
});

/***/ }),
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _isIterable2 = __webpack_require__(90);

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(93), __esModule: true };

/***/ }),
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(95), __esModule: true };

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(97);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(99);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HANDLE_PARAMS = exports.HANDLE_HEADER = exports.HANDLE_URL = exports.REQUEST_COMMON = undefined;

var _keys = __webpack_require__(26);

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = __webpack_require__(27);

var _typeof3 = _interopRequireDefault(_typeof2);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = __webpack_require__(21);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries2 = __webpack_require__(22);

var _entries3 = _interopRequireDefault(_entries2);

var _assign = __webpack_require__(10);

var _assign2 = _interopRequireDefault(_assign);

var _stringify = __webpack_require__(3);

var _stringify2 = _interopRequireDefault(_stringify);

var _commonUtils = __webpack_require__(9);

var _constant = __webpack_require__(6);

var _cache = __webpack_require__(8);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

"use strict";

var transformJson = function transformJson() {
    var data = {
        fun: {
            main: null,
            loop: null,
            typeof: null
        },
        _bigNums: []
    };
    data.fun.loop = function (arg) {
        var template = {
            item: [],
            loop: {
                array: {
                    item: arg.array.item.slice(1, arg.array.item.length)
                },
                parent: {
                    name: arg.parent.name,
                    object: arg.parent.object
                },
                key: arg.key
            }
        };
        if (arg.array.item.length > 0) {
            template.item = JSON.parse((0, _stringify2.default)(arg.array.item));
            template.item.splice(0, 1);
            if (arg.array.item[0] == arg.parent.name && arg.array.item.length <= 2) {
                if (_commonUtils.COMMON_TOOLS.eoTypeof(template.loop.parent.object[arg.array.item[0]]) == 'Array') {
                    var length = template.loop.parent.object[arg.array.item[0]].length >= 1 ? template.loop.parent.object[arg.array.item[0]].length - 1 : 0;
                    if (_commonUtils.COMMON_TOOLS.eoTypeof(template.loop.parent.object[arg.array.item[0]][length]) == 'Undefined') {
                        template.loop.parent.object[arg.array.item[0]][length] = {};
                    } else if (_commonUtils.COMMON_TOOLS.eoTypeof(template.loop.parent.object[arg.array.item[0]][length]) != 'Object') {
                        length++;
                        template.loop.parent.object[arg.array.item[0]][length] = {};
                    }
                    template.loop.parent.object[arg.array.item[0]][length][arg.key.name] = arg.key.value;
                } else if (_commonUtils.COMMON_TOOLS.eoTypeof(template.loop.parent.object[arg.array.item[0]]) == 'Object') {
                    template.loop.parent.object[arg.array.item[0]][arg.key.name] = arg.key.value;
                } else {
                    template.loop.parent.object[arg.array.item[0]] = {};
                    template.loop.parent.object[arg.array.item[0]][arg.key.name] = arg.key.value;
                }
            } else {
                if (_commonUtils.COMMON_TOOLS.eoTypeof(template.loop.parent.object[arg.array.item[0]]) == 'Array') {
                    template.loop.parent.object = template.loop.parent.object[arg.array.item[0]][0];
                } else {
                    if (_commonUtils.COMMON_TOOLS.eoTypeof(template.loop.parent.object[arg.array.item[0]]) != 'Object') {
                        template.loop.parent.object[arg.array.item[0]] = {};
                    }
                    template.loop.parent.object = template.loop.parent.object[arg.array.item[0]];
                }
                data.fun.loop(template.loop);
            }
        } else {
            template.loop.parent.object = arg.key.value;
        }
    };
    data.fun.main = function (arg) {
        var template = {
            loopObject: null,
            array: {
                parent: arg.parent || [],
                child: [],
                item: []
            },
            loopVar: {
                $index: 0,
                length: 0
            },
            icon: {
                child: false,
                parent: false
            },
            result: arg.result || {}
        };
        arg.input.map(function (val, key) {
            template.array.item = (val.paramKey + '').replace(/(\s)*([:]{2}|[>]{2})(\s)*/g, '>>').split(/[:]{2}|[>]{2}/);
            template.loopVar.length = template.array.item.length;
            var originParamInfo = val.paramInfo;
            try {
                val.paramInfo = val.paramInfo || val.paramValue || '';
                if (val.type) {
                    switch (parseInt(val.type || 0)) {
                        case 0:
                        case 1:
                        case 9:
                            {
                                break;
                            }
                        default:
                            {
                                if (val.type > 999) {} else {
                                    if (val.paramInfo) {
                                        val.paramInfo = '#' + val.paramInfo.replace(/^#/, '');
                                    } else {
                                        switch (parseInt(val.type || 0)) {
                                            case 2:
                                            case 13:
                                                {
                                                    val.paramInfo = {};
                                                    break;
                                                }
                                            case 12:
                                                {
                                                    val.paramInfo = [];
                                                    break;
                                                }
                                        }
                                    }
                                }

                                break;
                            }
                    }
                }
                if (/^#/.test(val.paramInfo) && !/^#(([1-9]\d*)|0)(\.\d*)?/.test(val.paramInfo)) {
                    if (/^#array/.test(val.paramInfo)) {
                        val.paramInfo = [];
                    } else {
                        var check_data = val.paramInfo.replace(/\s/g, '');
                        var bigNum_regex = /([\[:,]){1}(\d{16,})([,\]\}]){1}/g;
                        var m;

                        do {
                            m = bigNum_regex.exec(check_data);
                            if (m) {
                                data._bigNums.push(m[2]);
                                val.paramInfo = val.paramInfo.replace(/([\[:])?(\d{16,})\s*([,\}\]])/, "$1\"#$2\"$3");
                            }
                            check_data = val.paramInfo.replace(/\s/g, '');
                        } while (m);
                        val.paramInfo = JSON.parse(val.paramInfo.substring(1));
                    }
                } else {
                    val.paramInfo = val.paramInfo || '';
                }
            } catch (e) {
                val.paramInfo = originParamInfo;
            }
            switch (template.loopVar.length) {
                case 1:
                    {
                        if (template.array.item[0]) {
                            template.array.parent.push(template.array.item[0]);
                            template.result[template.array.item[0]] = val.paramInfo;
                            template.icon.parent = true;
                        }
                        break;
                    }
                default:
                    {
                        template.loopVar.$index = template.array.parent.indexOf(template.array.item[template.loopVar.length - 2]);
                        if (template.loopVar.$index > -1) {
                            template.array.parent.push(template.array.item[template.loopVar.length - 1]);
                            template.loopObject = {
                                array: {
                                    item: template.array.item
                                },
                                parent: {
                                    name: template.array.item[template.loopVar.length - 2],
                                    object: template.result
                                },
                                key: {
                                    name: template.array.item[template.loopVar.length - 1],
                                    value: val.paramInfo || ''
                                }
                            };
                            data.fun.loop(template.loopObject);
                            template.icon.parent = true;
                        } else {
                            template.array.child.push(val);
                            template.icon.child = true;
                        }
                        break;
                    }
            }
        });
        if (template.icon.parent && template.icon.child) {
            template.result = data.fun.main({
                input: template.array.child,
                result: template.result,
                parent: template.array.parent
            });
        } else if (template.icon.child) {
            template.array.child.map(function (val, key) {
                template.result[val.paramKey] = val.paramInfo || '';
            });
        }
        return template.result;
    };
    return function (input) {
        var template = {
            input: [],
            output: '',
            match: []
        };
        template.input = (0, _assign2.default)([], input);
        template.output = (0, _stringify2.default)(data.fun.main({
            input: template.input
        }));
        template.match = template.output.match(/"#(([1-9]\d*)|0)(\.\d*)?"/g) || [];
        template.match.forEach(function (val, key) {
            template.output = template.output.replace(val, val.substring(2, val.length - 1));
        });
        return template.output;
    };
};

var REQUEST_COMMON = exports.REQUEST_COMMON = {
    jwtEncode: function jwtEncode(jwtAuth) {

        if (!(jwtAuth.alg in _constant.CONSTANT.JWT_METHOD)) return {
            type: 'error',
            errorReason: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.Jwt.inValidMethod[_cache.PRODUCT_INFO.lang], [jwtAuth.alg])
        };
        var payload = '';
        try {
            payload = (0, _stringify2.default)(JSON.parse(jwtAuth.payload));
        } catch (e) {
            return {
                type: 'error',
                errorReason: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.Jwt.inValidPayload[_cache.PRODUCT_INFO.lang])
            };
        }
        if (!jwtAuth.tokenName) {
            jwtAuth.tokenName = 'tokenName';
        }
        var header = (0, _stringify2.default)({
            alg: jwtAuth.alg,
            typ: jwtAuth.typ || "JWT"
        });
        var secretSalt = jwtAuth.secretSalt;
        var before_sign = _commonUtils.COMMON_TOOLS.base64url(CryptoJS.enc.Utf8.parse(header)) + '.' + _commonUtils.COMMON_TOOLS.base64url(CryptoJS.enc.Utf8.parse(payload));
        var signature = CryptoJS[_constant.CONSTANT.JWT_METHOD[jwtAuth.alg]](before_sign, secretSalt);
        signature = _commonUtils.COMMON_TOOLS.base64url(signature);
        var result = before_sign + '.' + signature;
        return result;
    },
    handleEnv: function handleEnv(env, url, headers, params, raw, requestType, flagFormDataToJson) {
        if (!$.isEmptyObject(env)) {

            var envHeaders = env.headers;
            var headerExist = false;
            var statusController = {
                type: 'success',
                errorReason: ''
            };
            var key = Object.key,
                value = Object.value,
                entries = _entries3.default;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(entries(envHeaders)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                    var _key = _ref2[0];
                    var _value = _ref2[1];

                    headerExist = false;
                    var _iteratorNormalCompletion12 = true;
                    var _didIteratorError12 = false;
                    var _iteratorError12 = undefined;

                    try {
                        for (var _iterator12 = (0, _getIterator3.default)(entries(headers)), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                            var _ref23 = _step12.value;

                            var _ref24 = (0, _slicedToArray3.default)(_ref23, 2);

                            var _key11 = _ref24[0];
                            var _value11 = _ref24[1];


                            if (_key.toLowerCase() == _key11.toLowerCase()) {
                                headerExist = true;
                            }
                        }
                    } catch (err) {
                        _didIteratorError12 = true;
                        _iteratorError12 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion12 && _iterator12.return) {
                                _iterator12.return();
                            }
                        } finally {
                            if (_didIteratorError12) {
                                throw _iteratorError12;
                            }
                        }
                    }

                    if (headerExist == false) {
                        headers[_key] = _value;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var paramList = env.extraParams;

            if (requestType == '0' && flagFormDataToJson) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = (0, _getIterator3.default)(entries(paramList)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var _ref3 = _step2.value;

                        var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

                        var _key2 = _ref4[0];
                        var _value2 = _ref4[1];

                        if (!(_key2 in params)) {
                            params[_key2] = _value2;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                params = _commonUtils.COMMON_TOOLS.eoStringify(params);
            } else if (requestType == '0' || requestType == '2' || requestType == '3') {
                if ((typeof params === 'undefined' ? 'undefined' : (0, _typeof3.default)(params)) != 'object') {
                    try {
                        params = JSON.parse(params);
                    } catch (e) {
                        params = params;
                    }
                }
                if (Object.prototype.toString.call(params) == '[object Object]') {
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = (0, _getIterator3.default)(entries(paramList)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var _ref5 = _step3.value;

                            var _ref6 = (0, _slicedToArray3.default)(_ref5, 2);

                            var _key3 = _ref6[0];
                            var _value3 = _ref6[1];

                            if (!(_key3 in params)) {
                                if (/^#/.test(_value3)) {
                                    try {
                                        _value3 = JSON.parse(_value3.substring(1));
                                    } catch (e) {}
                                }
                                params[_key3] = _value3;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                } else if (Object.prototype.toString.call(params) == '[object Array]') {
                    params[0] = params[0] || {};
                    if (Object.prototype.toString.call(params[0]) == '[object Object]') {
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;

                        try {
                            for (var _iterator4 = (0, _getIterator3.default)(entries(paramList)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var _ref7 = _step4.value;

                                var _ref8 = (0, _slicedToArray3.default)(_ref7, 2);

                                var _key4 = _ref8[0];
                                var _value4 = _ref8[1];

                                if (!(_key4 in params)) {
                                    if (/^#/.test(_value4)) {
                                        try {
                                            _value4 = JSON.parse(_value4.substring(1));
                                        } catch (e) {}
                                    }
                                    params[0][_key4] = _value4;
                                }
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                    _iterator4.return();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }
                    }
                }
            }

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = (0, _getIterator3.default)(entries(env.globalParams)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _ref9 = _step5.value;

                    var _ref10 = (0, _slicedToArray3.default)(_ref9, 2);

                    var _key5 = _ref10[0];
                    var _value5 = _ref10[1];

                    for (var _childKey in headers) {
                        headers[_commonUtils.COMMON_TOOLS.replaceAll('{{' + _key5 + '}}', _value5, _childKey)] = _commonUtils.COMMON_TOOLS.replaceAll('{{' + _key5 + '}}', _value5, headers[_childKey]);
                        if ('{{' + _key5 + '}}' == _childKey) {
                            delete headers[_childKey];
                        }
                    }
                    url = _commonUtils.COMMON_TOOLS.replaceAll('{{' + _key5 + '}}', _value5, url);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var midheaders = (0, _stringify2.default)(headers).toLowerCase();
            midheaders = JSON.parse(midheaders);
            if (env.envAuth) {
                switch (Number(env.envAuth.status)) {
                    case 1:
                        {
                            if (midheaders["authorization"]) break;
                            if (env.envAuth.basicAuth) {
                                var str = env.envAuth.basicAuth.username + ':' + env.envAuth.basicAuth.password;
                                headers['Authorization'] = 'Basic ' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str));
                            }
                            break;
                        }
                    case 2:
                        {
                            var token = REQUEST_COMMON.jwtEncode(env.envAuth.jwtAuth);
                            if (token.type == 'error') {
                                statusController = token;
                                break;
                            }
                            if (!env.envAuth.jwtAuth.tokenName) {
                                statusController = {
                                    type: 'error',
                                    errorReason: _constant.CONSTANT.LANG.Jwt.unToken[_cache.PRODUCT_INFO.lang]
                                };
                            }
                            if (env.envAuth.jwtAuth.position == 'header') {
                                if (midheaders["authorization"]) break;
                                headers[env.envAuth.jwtAuth.tokenName] = token;
                            } else {
                                var query = {};
                                query[env.envAuth.jwtAuth.tokenName] = token;
                                url = HANDLE_URL.jointQuery(url, query);
                            }
                        }
                }
            }

            if (requestType == '1') {
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {

                    for (var _iterator6 = (0, _getIterator3.default)(entries(env.globalParams)), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var _ref11 = _step6.value;

                        var _ref12 = (0, _slicedToArray3.default)(_ref11, 2);

                        var _key6 = _ref12[0];
                        var _value6 = _ref12[1];

                        var regRaw = new RegExp('{{' + _key6 + '}}', "gm");
                        raw = raw.toString().replace(regRaw, _value6);
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
            } else {
                if (typeof params == 'string') {
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = (0, _getIterator3.default)(entries(env.globalParams)), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var _ref13 = _step7.value;

                            var _ref14 = (0, _slicedToArray3.default)(_ref13, 2);

                            var _key7 = _ref14[0];
                            var _value7 = _ref14[1];

                            var regRaw = new RegExp('{{' + _key7 + '}}', "gm");
                            params = params.toString().replace(regRaw, _value7);
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                } else if (typeof params == 'number') {
                    params = params.toString();
                    var _iteratorNormalCompletion8 = true;
                    var _didIteratorError8 = false;
                    var _iteratorError8 = undefined;

                    try {
                        for (var _iterator8 = (0, _getIterator3.default)(entries(env.globalParams)), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                            var _ref15 = _step8.value;

                            var _ref16 = (0, _slicedToArray3.default)(_ref15, 2);

                            var _key8 = _ref16[0];
                            var _value8 = _ref16[1];

                            var regRaw = new RegExp('{{' + _key8 + '}}', "gm");
                            params = params.toString().replace(regRaw, _value8);
                        }
                    } catch (err) {
                        _didIteratorError8 = true;
                        _iteratorError8 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                _iterator8.return();
                            }
                        } finally {
                            if (_didIteratorError8) {
                                throw _iteratorError8;
                            }
                        }
                    }
                } else {
                    if (HANDLE_PARAMS.judgeFileExist(params) && requestType == '0') {
                        var _iteratorNormalCompletion9 = true;
                        var _didIteratorError9 = false;
                        var _iteratorError9 = undefined;

                        try {

                            for (var _iterator9 = (0, _getIterator3.default)(entries(env.globalParams)), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                                var _ref17 = _step9.value;

                                var _ref18 = (0, _slicedToArray3.default)(_ref17, 2);

                                var _key9 = _ref18[0];
                                var _value9 = _ref18[1];

                                var regParams = new RegExp('{{' + _key9 + '}}', "gm");
                                var _iteratorNormalCompletion10 = true;
                                var _didIteratorError10 = false;
                                var _iteratorError10 = undefined;

                                try {
                                    for (var _iterator10 = (0, _getIterator3.default)(entries(params)), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                                        var _ref19 = _step10.value;

                                        var _ref20 = (0, _slicedToArray3.default)(_ref19, 2);

                                        var key1 = _ref20[0];
                                        var value1 = _ref20[1];

                                        if (typeof value1 == 'string') {
                                            params[key1.replace(regParams, _value9)] = value1.replace(regParams, _value9);
                                        }
                                        if (key1 != key1.replace(regParams, _value9)) {
                                            params[key1.replace(regParams, _value9)] = value1.replace(regParams, _value9);
                                            delete params[key1];
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError10 = true;
                                    _iteratorError10 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                            _iterator10.return();
                                        }
                                    } finally {
                                        if (_didIteratorError10) {
                                            throw _iteratorError10;
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError9 = true;
                            _iteratorError9 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                    _iterator9.return();
                                }
                            } finally {
                                if (_didIteratorError9) {
                                    throw _iteratorError9;
                                }
                            }
                        }
                    } else {
                        if ((0, _keys2.default)(env.globalParams).length) {
                            for (var childKey in params) {
                                var afterKey = null;
                                var afterValue = null;
                                var _iteratorNormalCompletion11 = true;
                                var _didIteratorError11 = false;
                                var _iteratorError11 = undefined;

                                try {
                                    for (var _iterator11 = (0, _getIterator3.default)(entries(env.globalParams)), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                                        var _ref21 = _step11.value;

                                        var _ref22 = (0, _slicedToArray3.default)(_ref21, 2);

                                        var _key10 = _ref22[0];
                                        var _value10 = _ref22[1];

                                        if (afterKey) {
                                            afterKey = _commonUtils.COMMON_TOOLS.replaceAll('{{' + _key10 + '}}', _value10, afterKey);
                                        } else {
                                            afterKey = _commonUtils.COMMON_TOOLS.replaceAll('{{' + _key10 + '}}', _value10, childKey);
                                        }
                                        if (afterValue) {
                                            afterValue = _commonUtils.COMMON_TOOLS.replaceAll('{{' + _key10 + '}}', _value10, afterValue);
                                        } else {
                                            afterValue = _commonUtils.COMMON_TOOLS.replaceAll('{{' + _key10 + '}}', _value10, params[childKey]);
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError11 = true;
                                    _iteratorError11 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion11 && _iterator11.return) {
                                            _iterator11.return();
                                        }
                                    } finally {
                                        if (_didIteratorError11) {
                                            throw _iteratorError11;
                                        }
                                    }
                                }

                                if (afterKey != childKey || (0, _stringify2.default)(params[childKey]) != (0, _stringify2.default)(afterValue)) {
                                    params[afterKey] = afterValue;
                                    if (afterKey != childKey) {
                                        delete params[childKey];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var urlPatt = new RegExp('^(((http|ftp|https):\/\/)|)(([\\\w\\\-_]+([\\\w\\\-\\\.]*)?(\\\.(' + _constant.CONSTANT.DOMAIN.join('|') + ')))|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(localhost))((\\\/)|(\\\?)|(:)|($))');

            if (env.baseUrl) {
                if (!urlPatt.test(url)) {
                    url = env.baseUrl + url;
                }
            }
        }
        return {
            type: statusController.type,
            errorReason: statusController.errorReason,
            url: url,
            headers: headers,
            params: params,
            raw: raw
        };
    }
};
var HANDLE_URL = exports.HANDLE_URL = {
    splitQuery: function splitQuery(url) {
        var hashArgs = {};
        if (url.indexOf('?') > -1) {
            var queryString = url.substring(url.indexOf('?') + 1);
            queryString = queryString.split('&');
            queryString.forEach(function (group, i) {
                if (group.indexOf('=') > -1) {
                    var index = group.indexOf('=') + 1;
                    var queryName = group.substring(0, index - 1);
                    var queryValue = group.substring(index);
                    if (!queryName) return;
                    if (queryName in hashArgs) {
                        if (Object.prototype.toString.call(hashArgs[queryName]) == '[object Array]') {
                            hashArgs[queryName].push(queryValue);
                        } else {
                            hashArgs[queryName] = [hashArgs[queryName], queryValue];
                        }
                    } else {
                        hashArgs[queryName] = queryValue;
                    }
                } else {
                    if (!group) return;
                    hashArgs[group] = '';
                }
            });
        }
        return hashArgs;
    },
    jointQuery: function jointQuery(url, query) {
        var data = {
            fun: {
                joint: null
            }
        };
        var equalSign = '=';
        data.fun.getQueryValue = function (queryName, queryValue) {
            var output = '';
            if (Object.prototype.toString.call(queryValue) == '[object Array]') {
                queryValue.forEach(function (val, key) {
                    if (output == '') {
                        output = val;
                    } else {
                        output = output + '&' + queryName + equalSign + val;
                    }
                });
            } else {
                output = queryValue;
            }
            return output;
        };
        data.fun.joint = function (query) {
            var output = '';
            var key = Object.key,
                value = Object.value,
                entries = _entries3.default;

            if ((typeof query === 'undefined' ? 'undefined' : (0, _typeof3.default)(query)) == 'object') {
                var _iteratorNormalCompletion13 = true;
                var _didIteratorError13 = false;
                var _iteratorError13 = undefined;

                try {
                    for (var _iterator13 = (0, _getIterator3.default)(entries(query)), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                        var _ref25 = _step13.value;

                        var _ref26 = (0, _slicedToArray3.default)(_ref25, 2);

                        var _key12 = _ref26[0];
                        var _value12 = _ref26[1];

                        if (output == '') {
                            output = _key12 + equalSign + data.fun.getQueryValue(_key12, _value12);
                        } else {
                            output = output + '&' + _key12 + equalSign + data.fun.getQueryValue(_key12, _value12);
                        }
                    }
                } catch (err) {
                    _didIteratorError13 = true;
                    _iteratorError13 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion13 && _iterator13.return) {
                            _iterator13.return();
                        }
                    } finally {
                        if (_didIteratorError13) {
                            throw _iteratorError13;
                        }
                    }
                }
            } else {
                output = query;
            }
            return output;
        };
        if ($.isEmptyObject(query) == false) {

            if (url.indexOf('?') == -1) {

                url = url + '?' + data.fun.joint(query);
            } else {
                var urlList = url.split('?');
                url = urlList[0] + '?' + data.fun.joint(query);
            }
        }
        return url;
    },

    handleProtocol: function handleProtocol(url, httpHeader) {
        var protocol = httpHeader == '1' ? 'https://' : 'http://';
        if (url.substring(0, 7) != "http://" && url.substring(0, 8) != "https://") {
            url = protocol + url;
        }
        return url;
    },
    destRequestUrl: function destRequestUrl(url) {
        var urlDetail = '';
        try {
            urlDetail = new URL(url);
        } catch (e) {
            console.log(e);
            urlDetail = url;
        }
        return urlDetail;
    },
    replaceRest: function replaceRest(url, rest) {
        for (var key in rest) {
            url = url.replace(eval("/\{(?!\{)" + key + "\}(?!\})/g"), rest[key]);
            url = url.replace(eval("/\:" + key + "/g"), rest[key]);
        }
        return url;
    },
    handleRightUrl: function handleRightUrl(url) {
        var url1 = HANDLE_URL.destRequestUrl(url);

        return url1.href;
    }
};
var HANDLE_HEADER = exports.HANDLE_HEADER = {
    isLegal: function isLegal(headers) {
        var key = Object.key,
            value = Object.value,
            entries = _entries3.default;

        var patt = /[\u4e00-\u9fa5]/g;
        var _iteratorNormalCompletion14 = true;
        var _didIteratorError14 = false;
        var _iteratorError14 = undefined;

        try {
            for (var _iterator14 = (0, _getIterator3.default)(entries(headers)), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                var _ref27 = _step14.value;

                var _ref28 = (0, _slicedToArray3.default)(_ref27, 2);

                var _key13 = _ref28[0];
                var _value13 = _ref28[1];

                if (!_key13) delete headers[_key13];
                if (patt.test(_key13) || patt.test(_value13)) {
                    return {
                        error: true,
                        errorReason: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.InvalidHeader[_cache.PRODUCT_INFO.lang], [_key13])
                    };
                }
            }
        } catch (err) {
            _didIteratorError14 = true;
            _iteratorError14 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion14 && _iterator14.return) {
                    _iterator14.return();
                }
            } finally {
                if (_didIteratorError14) {
                    throw _iteratorError14;
                }
            }
        }

        return {
            error: false
        };
    }
};
var HANDLE_PARAMS = exports.HANDLE_PARAMS = {
    handleFormJson: function handleFormJson(params) {
        var strJson = null;
        var error = {
            status: 0,
            errorText: ''
        };
        try {
            strJson = transformJson()(params);
        } catch (e) {
            console.log(e);
            var error = {
                status: 1,
                errorText: _constant.CONSTANT.LANG.FormdataToJson[_cache.PRODUCT_INFO.lang]
            };
        }
        return {
            dataParams: strJson,
            error: error
        };
    },
    handleJSON: function handleJSON(jsonParams, options) {
        var template = {
            output: options.rootType == "1" ? [{}] : {},
            loopFun: null
        };
        template.loopFun = function (params, output) {
            params.forEach(function (val, key) {
                if (val.checkbox && val.paramKey) {
                    val.paramInfo = _commonUtils.COMMON_TOOLS.evalBindParam(val.paramInfo, options.bindResponse, options.responseHeaders);
                    var paramInfo = val.paramInfo || "";
                    var parseParamInfo = val.paramInfo;
                    var hasChild = false;
                    val.paramType = val.paramType || '0';
                    val.childList = val.childList || [];
                    try {
                        parseParamInfo = JSON.parse(parseParamInfo);
                    } catch (e) {}
                    for (var i = 0; i < val.childList.length; i++) {
                        if (val.childList[i].checkbox && val.childList[i].paramKey) {
                            hasChild = true;
                            break;
                        }
                    }
                    switch (val.paramType.toString()) {
                        case '8':
                        case '3':
                        case '4':
                        case '5':
                        case '10':
                        case '11':
                        case '14':
                            {

                                try {
                                    paramInfo = JSON.parse(paramInfo.toLowerCase());
                                } catch (e) {}
                                break;
                            }
                        case '12':
                            {
                                if (!hasChild) {
                                    paramInfo = parseParamInfo;
                                } else {
                                    paramInfo = [{}];
                                }
                                break;
                            }
                        case '13':
                            {
                                if (!hasChild) {
                                    paramInfo = parseParamInfo;
                                } else {
                                    paramInfo = {};
                                }
                                break;
                            }
                        case '15':
                            {
                                paramInfo = null;
                                break;
                            }
                        default:
                            {}
                    }
                    if (hasChild && ((typeof paramInfo === 'undefined' ? 'undefined' : (0, _typeof3.default)(paramInfo)) != 'object' || !paramInfo)) {
                        paramInfo = {};
                    }
                    if (Object.prototype.toString.call(output) == '[object Array]') {
                        output[0][val.paramKey] = paramInfo;
                        if (val.childList.length) {
                            template.loopFun(val.childList, output[0][val.paramKey]);
                        }
                    } else {
                        output[val.paramKey] = paramInfo;
                        if (val.childList.length) {
                            template.loopFun(val.childList, output[val.paramKey]);
                        }
                    }
                }
            });
        };
        template.loopFun(jsonParams, template.output);
        return template.output;
    },
    judgeFileExist: function judgeFileExist(params) {
        if ((typeof params === 'undefined' ? 'undefined' : (0, _typeof3.default)(params)) == 'object') {
            var flagFile = false;
            var key = Object.key,
                value = Object.value,
                entries = _entries3.default;
            var _iteratorNormalCompletion15 = true;
            var _didIteratorError15 = false;
            var _iteratorError15 = undefined;

            try {
                for (var _iterator15 = (0, _getIterator3.default)(entries(params)), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                    var _ref29 = _step15.value;

                    var _ref30 = (0, _slicedToArray3.default)(_ref29, 2);

                    var _key14 = _ref30[0];
                    var _value14 = _ref30[1];

                    if (Object.prototype.toString.call(_value14) == '[object Blob]') {
                        flagFile = true;
                    }
                    if (Object.prototype.toString.call(_value14) == '[object Array]') {
                        _value14.forEach(function (item) {
                            if (Object.prototype.toString.call(item) == '[object Blob]') {
                                flagFile = true;
                            }
                        });
                    }
                }
            } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion15 && _iterator15.return) {
                        _iterator15.return();
                    }
                } finally {
                    if (_didIteratorError15) {
                        throw _iteratorError15;
                    }
                }
            }

            return flagFile;
        } else {
            return false;
        }
    },
    handleRequestParams: function handleRequestParams(headers, requestType, flagFormDataToJson, flagFile, params, raw, ContentType, processData, reportType) {
        var report = {};
        var request = {};
        switch (requestType.toString()) {
            case '0':
                {
                    if (flagFormDataToJson) {
                        ContentType = 'application/json; charset=UTF-8';
                        if (typeof params != 'string') {
                            report = request = (0, _stringify2.default)(params);
                        } else {
                            report = request = params;
                        }
                    } else if (typeof params == 'string') {
                        ContentType = 'text/plain; charset=UTF-8';
                        request = report = raw = params;
                    } else if (typeof params == 'number') {
                        ContentType = 'text/plain; charset=UTF-8';
                        request = report = raw = params.toString();
                    } else {
                        var key = Object.key,
                            value = Object.value,
                            entries = _entries3.default;

                        if (flagFile) {
                            request = new FormData();

                            var _loop = function _loop(_key15, _value15) {

                                if (Object.prototype.toString.call(_value15) == '[object Blob]') {
                                    if (_value15.uuid) {
                                        if (_value15.uuid == -1) {
                                            report[_key15] = _value15.name + " [文件不存在]" + ",";
                                        } else {
                                            report[_key15] = _value15.name + " [" + _value15.uuid + "]" + ",";
                                            request.append(_key15, _value15, _value15.name || _key15);
                                        }
                                    } else {
                                        report[_key15] = '[Object blob]';
                                        request.append(_key15, _value15, _value15.name || _key15);
                                    }
                                } else if (Object.prototype.toString.call(_value15) == '[object Array]') {

                                    var _flagFile = false;
                                    report[_key15] = [];
                                    _value15.forEach(function (item) {
                                        if (Object.prototype.toString.call(item) == '[object Blob]') {
                                            _flagFile = true;
                                        }
                                    });
                                    if (_flagFile == true) {
                                        _value15.forEach(function (item, index) {
                                            if (Object.prototype.toString.call(item) == '[object Blob]') {
                                                if (item.uuid) {
                                                    if (item.uuid == -1) {
                                                        report[_key15][index] = item.name + " [文件不存在]" + ",";
                                                    } else {
                                                        report[_key15][index] = item.name + " [" + item.uuid + "]";
                                                        request.append(_key15, item, item.name || _key15);
                                                    }
                                                } else {
                                                    report[_key15][index] = 'Object blob';
                                                    request.append(_key15, item, item.name || _key15);
                                                }
                                            } else {

                                                request.append(_key15, item);
                                                report[_key15][index] = item;
                                            }
                                        });
                                    } else {
                                        _value15.forEach(function (item) {
                                            request.append(_key15, item);
                                        });
                                        report[_key15] = _value15;
                                    }
                                } else {
                                    request.append(_key15, _value15);
                                    report[_key15] = _value15;
                                }
                            };

                            var _iteratorNormalCompletion16 = true;
                            var _didIteratorError16 = false;
                            var _iteratorError16 = undefined;

                            try {
                                for (var _iterator16 = (0, _getIterator3.default)(entries(params)), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                                    var _ref31 = _step16.value;

                                    var _ref32 = (0, _slicedToArray3.default)(_ref31, 2);

                                    var _key15 = _ref32[0];
                                    var _value15 = _ref32[1];

                                    _loop(_key15, _value15);
                                }
                            } catch (err) {
                                _didIteratorError16 = true;
                                _iteratorError16 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion16 && _iterator16.return) {
                                        _iterator16.return();
                                    }
                                } finally {
                                    if (_didIteratorError16) {
                                        throw _iteratorError16;
                                    }
                                }
                            }
                        } else {
                            request = report = params;
                        }
                    }
                    break;
                }
            case '2':
                {
                    ContentType = 'application/json; charset=UTF-8';
                    if (typeof params != 'string') {
                        report = request = (0, _stringify2.default)(params);
                    } else {
                        report = request = params;
                    }
                    break;
                }
            case '3':
                {
                    ContentType = 'application/xml';
                    if (typeof params != 'string') {
                        report = request = '<?xml version="1.0" encoding="UTF-8"?> ' + $.json2xml(params) + '';
                    } else {
                        report = request = params;
                    }
                    break;
                }
            case '1':
                {

                    ContentType = 'text/plain; charset=UTF-8';
                    request = report = raw;
                    break;
                }
        }

        var midheaders = (0, _stringify2.default)(headers).toLowerCase();
        midheaders = JSON.parse(midheaders);
        if (typeof request == 'string') {
            reportType = '1';
        } else {
            reportType = '0';
            if ((0, _stringify2.default)(request) === '{}' && !flagFile) {
                report = request = null;
            }
        }

        if (reportType == '1' && !flagFormDataToJson) {}

        if (flagFile) {
            ContentType = false;
            processData = false;
            var _key16 = Object.key,
                _value16 = Object.value,
                _entries = _entries3.default;
            var _iteratorNormalCompletion17 = true;
            var _didIteratorError17 = false;
            var _iteratorError17 = undefined;

            try {

                for (var _iterator17 = (0, _getIterator3.default)(_entries(headers)), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                    var _ref33 = _step17.value;

                    var _ref34 = (0, _slicedToArray3.default)(_ref33, 2);

                    var _key17 = _ref34[0];
                    var _value17 = _ref34[1];

                    if (_key17.toLowerCase() == 'content-type') {
                        delete headers[_key17];
                    }
                }
            } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion17 && _iterator17.return) {
                        _iterator17.return();
                    }
                } finally {
                    if (_didIteratorError17) {
                        throw _iteratorError17;
                    }
                }
            }
        }
        return {
            report: report,
            request: request,
            raw: raw,
            ContentType: ContentType,
            processData: processData,
            reportType: reportType,
            headers: headers
        };
    },

    changeDataURLtoBlob: function changeDataURLtoBlob(dataurl) {
        var arr = dataurl.split(',');
        var mime = arr[0].match(/:(.*?);/);
        if (arr[0].match(/:(.*?);/)) {
            mime = mime[1] || '';
        } else {
            mime = '';
        }
        if (arr[1]) {
            var bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
        } else {
            u8arr = new Uint8Array(0);
        }
        return new Blob([u8arr], {
            type: mime
        });
    }
};

/***/ }),
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(2);


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var core = __webpack_require__(0);
var LIBRARY = __webpack_require__(24);
var wksExt = __webpack_require__(50);
var defineProperty = __webpack_require__(12).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.INJECT_CODE = undefined;

var _commonUtils = __webpack_require__(9);

var _constant = __webpack_require__(6);

var _cache = __webpack_require__(8);

'use strict';
var INJECT_CODE = exports.INJECT_CODE = {
    defineEo: function defineEo(env) {
        var eo = {
            userFunction: {}
        };
        var fun = {};
        fun.execute = function (funStr) {
            try {
                eval(funStr);
            } catch (e) {}
        };
        eo.img = function (fileName) {
            if (fileName.toLowerCase() == 'jpg' || fileName.toLowerCase() == 'png' || fileName.toLowerCase() == 'gif') {
                return _cache.COMMON_FILE[fileName.toLowerCase()];
            } else {
                return {};
            }
        };
        eo.MD5 = eo.Md5 = eo.md5 = function (sMessage, bit) {
            try {
                var result = CryptoJS.MD5(sMessage.toString());
                result = CryptoJS.enc.Hex.stringify(result);
                return result;
            } catch (e) {
                console.log(e);
                throw {
                    errorReason: _constant.CONSTANT.LANG.EoFun.eoMd5[_cache.PRODUCT_INFO.lang]
                };
            }
        };
        var num145847kda = [1, 224, 256, 384, 512];

        var _loop = function _loop(i) {
            eo['HmacSHA' + num145847kda[i]] = eo['hmacSHA' + num145847kda[i]] = eo['HmacSha' + num145847kda[i]] = function (sMessage, sKey) {
                try {
                    var result = CryptoJS['HmacSHA' + num145847kda[i]](sMessage.toString(), sKey || '');
                    result = CryptoJS.enc.Hex.stringify(result);
                    return result;
                } catch (e) {
                    console.log(e);
                    throw {
                        errorReason: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.EoFun.eoHmacSHA[_cache.PRODUCT_INFO.lang], [num145847kda[i]])
                    };
                }
            };
            eo['SHA' + num145847kda[i]] = eo['Sha' + num145847kda[i]] = eo['sha' + num145847kda[i]] = function (sMessage) {
                try {
                    var result = CryptoJS['SHA' + num145847kda[i]](sMessage.toString());
                    result = CryptoJS.enc.Hex.stringify(result);
                    return result;
                } catch (e) {
                    console.log(e);
                    throw {
                        errorReason: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.EoFun.eoSHA[_cache.PRODUCT_INFO.lang], [num145847kda[i]])
                    };
                }
            };
        };

        for (var i = 0; i < num145847kda.length; i++) {
            _loop(i);
        }
        eo.file = function (fileName) {
            if (fileName.toLowerCase() == 'txt' || fileName.toLowerCase() == 'none' || fileName.toLowerCase() == 'doc' || fileName.toLowerCase() == 'docx' || fileName.toLowerCase() == 'pdf') {
                return _cache.COMMON_FILE[fileName.toLowerCase()];
            } else {
                return {};
            }
        };
        var funStr = '';
        _cache.CACHE.COMMON_FUNCTION = _cache.CACHE.COMMON_FUNCTION || [];
        _cache.CACHE.COMMON_FUNCTION.forEach(function (val, key) {
            var paramStr = '';
            val.functionParam.forEach(function (val1, key1) {
                paramStr = paramStr + val1.paramKey + ',';
            });
            funStr = 'eo.userFunction["' + val.functionKey + '"] = function (' + paramStr + '){' + val.functionCode + '};';
            fun.execute(funStr);
        });
        funStr = null;
        return eo;
    },
    evalBeforeScript: function evalBeforeScript(beforeScript, url, query, headers, params, raw, env, eo, response) {

        try {
            eval(beforeScript);
            return {
                error: false,
                url: url,
                query: query,
                headers: headers,
                params: params,
                raw: raw,
                env: env
            };
        } catch (e) {
            var errorReason = '';
            if (e.errorReason) {
                return {
                    error: true,
                    errorReason: _constant.CONSTANT.LANG.InjectCode.before[_cache.PRODUCT_INFO.lang] + e.errorReason
                };
            } else {
                if (navigator.userAgent.indexOf('Firefox') > -1) {
                    errorReason = e.toString();
                } else {
                    errorReason = e.message;
                }
                var reg = /eo\.userFunction\.(.+) is not a function/;
                if (reg.test(errorReason)) {
                    errorReason = _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.CommonFun[_cache.PRODUCT_INFO.lang], [RegExp.$1]);
                }
                return {
                    error: true,
                    errorReason: _constant.CONSTANT.LANG.InjectCode.before[_cache.PRODUCT_INFO.lang] + errorReason
                };
            }
        }
    },
    evalAfterScript: function evalAfterScript(afterScript, response, env, eo) {
        try {
            eval(afterScript);
            return {
                error: false,
                response: response,
                env: env
            };
        } catch (e) {
            var errorReason = '';
            console.log(e, afterScript);
            if (e.errorReason) {
                return {
                    error: true,
                    errorReason: _constant.CONSTANT.LANG.InjectCode.after[_cache.PRODUCT_INFO.lang] + e.errorReason
                };
            } else {
                if (navigator.userAgent.indexOf('Firefox') > -1) {
                    errorReason = e.toString();
                } else {
                    errorReason = e.message;
                }
                var reg = /eo\.userFunction\.(.+) is not a function/;
                if (reg.test(errorReason)) {
                    errorReason = _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.CommonFun[_cache.PRODUCT_INFO.lang], [RegExp.$1]);
                }
                return {
                    error: true,
                    errorReason: _constant.CONSTANT.LANG.InjectCode.after[_cache.PRODUCT_INFO.lang] + errorReason
                };
            }
        }
    }
};

/***/ }),
/* 53 */,
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = __webpack_require__(38);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(39);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = __webpack_require__(10);

var _assign2 = _interopRequireDefault(_assign);

var _promise = __webpack_require__(29);

var _promise2 = _interopRequireDefault(_promise);

exports.handleCaseCode = handleCaseCode;

var _cache = __webpack_require__(8);

var _requestUtils = __webpack_require__(28);

var _autoCode = __webpack_require__(74);

var _auto = __webpack_require__(69);

var _trans = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function handleCaseCode(caseList) {
    return new _promise2.default(function (resolve, reject) {
        var asyncControl = function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var listIndex;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                listIndex = 0;

                            case 1:
                                if (!(listIndex < caseList.envCaseList.length)) {
                                    _context.next = 10;
                                    break;
                                }

                                if (!_trans.TRANS.stopStatus) {
                                    _context.next = 5;
                                    break;
                                }

                                reject('stop');
                                return _context.abrupt('break', 10);

                            case 5:
                                _context.next = 7;
                                return singlePreCodeTest(listIndex).then(function (result) {});

                            case 7:
                                listIndex++;
                                _context.next = 1;
                                break;

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function asyncControl() {
                return _ref.apply(this, arguments);
            };
        }();

        var caseReport = [];
        var env = {};
        if (caseList.isAfter) {
            env = caseList.env;
        } else {

            env = {
                baseUrl: '',
                headers: {},
                extraParams: {},
                globalParams: {},
                envAuth: {}
            };

            if (!$.isEmptyObject(caseList.env)) {
                if (_cache.PRODUCT_INFO.productName == 'webCn' || _cache.PRODUCT_INFO.productName == 'webEn' || _cache.PRODUCT_INFO.productName == 'independent' && _cache.PRODUCT_INFO.version > '4.1') {
                    env.baseUrl = env.baseUrl == '' ? caseList.env.frontURI : env.baseUrl;
                } else {
                    if (caseList.env.frontURIList[0]) {
                        env.baseUrl = env.baseUrl == '' ? caseList.env.frontURIList[0].uri : env.baseUrl;
                    }
                }
                var paramList = {};
                for (var i = 0; i < caseList.env.paramList.length; i++) {
                    paramList[caseList.env.paramList[i].paramKey] = caseList.env.paramList[i].paramValue;
                }
                var headerList = {};
                for (var i = 0; i < caseList.env.headerList.length; i++) {
                    headerList[caseList.env.headerList[i].headerName] = caseList.env.headerList[i].headerValue;
                }
                var additionalParamList = {};
                for (var i = 0; i < caseList.env.additionalParamList.length; i++) {
                    additionalParamList[caseList.env.additionalParamList[i].paramKey] = caseList.env.additionalParamList[i].paramValue;
                }
                env.headers = (0, _assign2.default)({}, headerList, env.headers);
                env.extraParams = (0, _assign2.default)({}, additionalParamList, env.extraParams);
                env.globalParams = (0, _assign2.default)({}, paramList, env.globalParams);
                env.envAuth = (0, _assign2.default)({}, caseList.env.envAuth);
            }
        }

        function singlePreCodeTest(listIndex) {
            return new _promise2.default(function (resolve, reject) {
                var caseInfo = caseList.envCaseList[listIndex];
                switch (Number(caseInfo.caseType)) {
                    case 0:
                        {
                            caseReport[listIndex] = {
                                caseName: caseInfo.caseName,
                                status: 'tested',
                                reportStatus: 'finish',
                                time: '0ms',
                                afterCaseReportList: [],
                                responseList: [{
                                    responseType: "success"
                                }]
                            };
                            var which = 'before';
                            if (caseList.isAfter) {
                                which = 'after';
                            } else {
                                which = 'before';
                            }
                            var auto = false;
                            (0, _auto.EVAL_AUTOUI)(caseInfo, env, caseReport[listIndex], auto, which, resolve, reject, listIndex);
                            break;
                        }
                    default:
                        {
                            caseReport[listIndex] = {
                                caseName: caseInfo.caseName,
                                status: 'finish',
                                time: '0ms',
                                initReportList: [],
                                responseList: [],
                                successApi: 0,
                                totalApi: 0
                            };
                            var _which = 'before';
                            if (caseList.isAfter) {
                                _which = 'after';
                            } else {
                                _which = 'before';
                            }
                            var autoCode = false;
                            (0, _autoCode.EVAL_AUTOCODE)(caseInfo, env, caseReport[listIndex], autoCode, _which, resolve, reject, listIndex);
                        }
                }
            });
        }

        asyncControl().then(function () {

            resolve({
                report: caseReport,
                env: env
            });
        }).catch(function (e) {

            resolve({
                report: caseReport,
                env: env
            });
            console.log(e);
        });
    });
};

/***/ }),
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(19);
var toIObject = __webpack_require__(15);
var isEnum = __webpack_require__(25).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {


var $export = __webpack_require__(4);
var core = __webpack_require__(0);
var fails = __webpack_require__(18);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(34)('meta');
var isObject = __webpack_require__(7);
var has = __webpack_require__(14);
var setDesc = __webpack_require__(12).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(18)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id,
    w: {}         
  } });
};
var fastKey = function (it, create) {
 
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
   
    if (!isExtensible(it)) return 'F';
   
    if (!create) return 'E';
   
    setMeta(it);
 
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
   
    if (!isExtensible(it)) return true;
   
    if (!create) return false;
   
    setMeta(it);
 
  } return it[META].w;
};
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {


var $keys = __webpack_require__(56);
var hiddenKeys = __webpack_require__(46).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 68 */,
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EVAL_AUTOUI = undefined;

var _regenerator = __webpack_require__(38);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = __webpack_require__(3);

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = __webpack_require__(26);

var _keys2 = _interopRequireDefault(_keys);

var _assign = __webpack_require__(10);

var _assign2 = _interopRequireDefault(_assign);

var _slicedToArray2 = __webpack_require__(21);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries3 = __webpack_require__(22);

var _entries4 = _interopRequireDefault(_entries3);

var _typeof2 = __webpack_require__(27);

var _typeof3 = _interopRequireDefault(_typeof2);

var _asyncToGenerator2 = __webpack_require__(39);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = __webpack_require__(29);

var _promise2 = _interopRequireDefault(_promise);

var _commonUtils = __webpack_require__(9);

var _requestUtils = __webpack_require__(28);

var _cache = __webpack_require__(8);

var _injectCode = __webpack_require__(52);

var _envCase = __webpack_require__(54);

var _constant = __webpack_require__(6);

var _trans = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVAL_AUTOUI = exports.EVAL_AUTOUI = function EVAL_AUTOUI(caseList, env, backResult, auto, which, resolve, reject, listIndex) {
    var asyncControl = function () {
        var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var k;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            k = 0;

                        case 1:
                            if (!(k < caseLen)) {
                                _context2.next = 9;
                                break;
                            }

                            if (!_trans.TRANS.stopStatus) {
                                _context2.next = 4;
                                break;
                            }

                            return _context2.abrupt('break', 9);

                        case 4:
                            _context2.next = 6;
                            return sendRequest(k);

                        case 6:
                            k++;
                            _context2.next = 1;
                            break;

                        case 9:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        return function asyncControl() {
            return _ref6.apply(this, arguments);
        };
    }();

    var caseLen = caseList.singleCaseList.length;
    var batchIndex = caseList.batchIndex;
    var response = {};
    var bindResponse = {};
    var responseHeaders = {};
    var codeTestTime = {
        startTime: null,
        finishTime: null
    };
    var AllRequestInfo = {
        apiLocation: {},
        redirectObj: {}
    };
    var caseListIndex = caseList.index || 0;
    backResult.batchIndex = batchIndex;

    if (caseListIndex == 0 && batchIndex == 'undefined') {
        _trans.TRANS.ajaxs = [];
    }
    backResult.responseList = new Array(caseLen);

    function sendRequest(k) {
        return new _promise2.default(function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(resolve, reject) {
                var caseData, error, eoFreeze, errorReasonPatt, url, params, headers, query, raw, rest, Redirection, host, handleErrorReason, i, getPublicFile, j, fileUrl, assistantHandleArguments, handleArguments, queryOrigin, key, value, entries, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref2, _ref3, _key, _value, beforeResponse, beforeResult, midEnvReulst, midRequestParams, errorBackResult, headerResult, handleRequestHeaders, getResponseHeaders, timeoutFun, Ajax;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                getResponseHeaders = function getResponseHeaders(details) {
                                    if (!details.initiator) {
                                        if (navigator.userAgent.indexOf('Firefox') > -1) {
                                            details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
                                        } else {
                                            details.initiator = '';
                                        }
                                    }
                                    var url1 = _requestUtils.HANDLE_URL.handleRightUrl(url);
                                    if ((details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) && (details.url.indexOf(url1) > -1 || Redirection.status)) {
                                        var _host = _requestUtils.HANDLE_URL.destRequestUrl(details.url).hostname;
                                        if (/^3\d+/.test(details.statusCode)) {
                                            Redirection.status = true;
                                            AllRequestInfo.redirectObj[details.requestId] = true;
                                        }
                                        details.responseHeaders.forEach(function (header) {
                                            header.name = header.name.toLowerCase();
                                            if (header.name == 'location') {
                                                Redirection.location = header.value;
                                            }
                                            if (header.name in eoFreeze.response.responseHeaders) {
                                                eoFreeze.response.responseHeaders[header.name] = eoFreeze.response.responseHeaders[header.name] + ";" + header.value;
                                            } else {
                                                eoFreeze.response.responseHeaders[header.name] = header.value;
                                            }
                                        });
                                        var requestIndex = AllRequestInfo[details.requestId].length - 1;
                                        AllRequestInfo[details.requestId][requestIndex].responseHeaders = eoFreeze.response.responseHeaders;
                                        AllRequestInfo[details.requestId][requestIndex].statusCode = details.statusCode;
                                        AllRequestInfo[details.requestId][requestIndex].testTime = new Date();
                                        var _key3 = Object.key,
                                            _value3 = Object.value,
                                            _entries2 = _entries4.default;
                                    }
                                };

                                handleRequestHeaders = function handleRequestHeaders(details) {
                                    if (!details.initiator) {
                                        if (navigator.userAgent.indexOf('Firefox') > -1) {
                                            details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
                                        } else {
                                            for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                                                if (details.requestHeaders[j].name.toLowerCase() == 'origin') {
                                                    details.initiator = details.requestHeaders[j].value;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    var url1 = _requestUtils.HANDLE_URL.handleRightUrl(url);

                                    if ((details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) && (details.url.indexOf(url1) > -1 || Redirection.status && details.url.indexOf(Redirection.location) > -1)) {

                                        if (!Redirection.status) {
                                            url = details.url;
                                        }
                                        var _entries = _entries4.default;

                                        details.requestHeaders.push({
                                            name: 'Cache-Control',
                                            value: 'no-cache'
                                        });
                                        var _iteratorNormalCompletion2 = true;
                                        var _didIteratorError2 = false;
                                        var _iteratorError2 = undefined;

                                        try {
                                            for (var _iterator2 = (0, _getIterator3.default)(_entries(headers)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                                var _ref4 = _step2.value;

                                                var _ref5 = (0, _slicedToArray3.default)(_ref4, 2);

                                                var _key2 = _ref5[0];
                                                var _value2 = _ref5[1];

                                                var headerFlag = false;

                                                for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                                                    _value2 = (_value2 || '').toString();
                                                    if (details.requestHeaders[j].name.toLowerCase() == _key2.toLowerCase()) {
                                                        headerFlag = true;
                                                        if (_key2.toLowerCase() == 'cookie') {
                                                            _commonUtils.COMMON_TOOLS.setCookieObj({
                                                                url: details.url,
                                                                cookies: _value2
                                                            });
                                                            _value2 = _commonUtils.COMMON_TOOLS.replaceCookieStr(details.requestHeaders[j].value, _value2);
                                                        }
                                                        details.requestHeaders[j].name = _key2;
                                                        details.requestHeaders[j].value = _value2;
                                                    }
                                                }

                                                if (headerFlag == false) {
                                                    if (_key2.toLowerCase() == 'cookie') {
                                                        _commonUtils.COMMON_TOOLS.setCookieObj({
                                                            url: details.url,
                                                            cookies: _value2
                                                        });
                                                    }
                                                    details.requestHeaders.push({
                                                        name: _key2,
                                                        value: _value2
                                                    });
                                                }
                                            }
                                        } catch (err) {
                                            _didIteratorError2 = true;
                                            _iteratorError2 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                                    _iterator2.return();
                                                }
                                            } finally {
                                                if (_didIteratorError2) {
                                                    throw _iteratorError2;
                                                }
                                            }
                                        }

                                        for (var j = 0; j < details.requestHeaders.length; j++) {
                                            eoFreeze.request.requestHeaders[details.requestHeaders[j].name] = details.requestHeaders[j].value;
                                        }
                                        AllRequestInfo[details.requestId] = AllRequestInfo[details.requestId] || [];
                                        AllRequestInfo[details.requestId].push({
                                            url: details.url,
                                            requestHeaders: eoFreeze.request.requestHeaders,
                                            statusCode: 0
                                        });
                                        AllRequestInfo.apiLocation[(0, _keys2.default)(AllRequestInfo).length - 2] = details.requestId;
                                        chrome.cookies.getAll({
                                            url: details.url
                                        }, function (cookies) {
                                            eoFreeze.request.requestHeaders['cookie'] = _commonUtils.COMMON_TOOLS.jointCookieObj({
                                                cookies: cookies,
                                                type: 'array'
                                            });
                                        });
                                    }
                                    return {
                                        requestHeaders: details.requestHeaders
                                    };
                                };

                                handleArguments = function handleArguments() {

                                    for (var i = 0; i < eoFreeze.data.restfulParams.length;) {
                                        if (!eoFreeze.data.restfulParams[i].paramKey || !eoFreeze.data.restfulParams[i].checkbox) {
                                            eoFreeze.data.restfulParams.splice(i, 1);
                                        } else {
                                            var midUrl = url;
                                            var beforeUrl = url;
                                            midUrl = midUrl.replace(eval("/\{(?!\{)" + eoFreeze.data.restfulParams[i].paramKey + "\}(?!\})/g"), eoFreeze.data.restfulParams[i].paramInfo);
                                            midUrl = midUrl.replace(eval("/\:" + eoFreeze.data.restfulParams[i].paramKey + "/g"), eoFreeze.data.restfulParams[i].paramInfo);
                                            if (beforeUrl != midUrl) {
                                                rest[_commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.restfulParams[i].paramKey, bindResponse, responseHeaders)] = _commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.restfulParams[i].paramInfo, bindResponse, responseHeaders);
                                            }
                                            i++;
                                        }
                                    }
                                    if (eoFreeze.data.requestType == '0') {

                                        for (var i = 0; i < eoFreeze.data.params.length;) {
                                            if (!eoFreeze.data.params[i].paramKey || !eoFreeze.data.params[i].checkbox) {
                                                eoFreeze.data.params.splice(i, 1);
                                            } else {
                                                eoFreeze.data.params[i].paramKey = _commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.params[i].paramKey, bindResponse, responseHeaders);
                                                eoFreeze.data.params[i].paramInfo = _commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.params[i].paramInfo, bindResponse, responseHeaders) || '';
                                                i++;
                                            }
                                        }
                                    }
                                    switch (eoFreeze.data.requestType) {
                                        case '0':
                                            {
                                                if (eoFreeze.data.method == 'GET') {
                                                    eoFreeze.data.params = [];
                                                }

                                                if (!eoFreeze.request.flagFormDataToJson) {
                                                    for (var i = 0; i < eoFreeze.data.params.length; i++) {
                                                        if (eoFreeze.data.flagFile == true) {
                                                            if (eoFreeze.data.params[i].paramType == '1') {
                                                                eoFreeze.data.params[i].files = eoFreeze.data.params[i].files || [];
                                                                var paramInfo = '';

                                                                if (eoFreeze.data.params[i].files.length) {
                                                                    for (var j = 0; j < eoFreeze.data.params[i].files.length; j++) {
                                                                        var uuid = eoFreeze.data.params[i].files[j].uuid;
                                                                        var file = _cache.PUBLIC_FILE[uuid];
                                                                        if (file) {
                                                                            file.uuid = uuid;
                                                                        } else {
                                                                            file = new Blob();
                                                                            file.uuid = "-1";
                                                                        }
                                                                        file.name = eoFreeze.data.params[i].files[j].name;
                                                                        if (eoFreeze.data.params[i].paramKey in params) {
                                                                            if (Object.prototype.toString.call(params[eoFreeze.data.params[i].paramKey]) == '[object Array]') {
                                                                                params[eoFreeze.data.params[i].paramKey].push(file);
                                                                            } else {
                                                                                params[eoFreeze.data.params[i].paramKey] = [file, params[eoFreeze.data.params[i].paramKey]];
                                                                            }
                                                                        } else {
                                                                            params[eoFreeze.data.params[i].paramKey] = file;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if (eoFreeze.data.params[i].paramKey in params) {
                                                                    if (Object.prototype.toString.call(params[eoFreeze.data.params[i].paramKey]) == '[object Array]') {
                                                                        params[eoFreeze.data.params[i].paramKey].push(eoFreeze.data.params[i].paramInfo || '');
                                                                    } else {
                                                                        params[eoFreeze.data.params[i].paramKey] = [params[eoFreeze.data.params[i].paramKey], eoFreeze.data.params[i].paramInfo || ''];
                                                                    }
                                                                } else {
                                                                    params[eoFreeze.data.params[i].paramKey] = eoFreeze.data.params[i].paramInfo || '';
                                                                }
                                                            }
                                                        } else {
                                                            if (eoFreeze.data.params[i].paramKey in params) {
                                                                if ((0, _typeof3.default)(params[eoFreeze.data.params[i].paramKey]) == 'object') {
                                                                    params[eoFreeze.data.params[i].paramKey].push(eoFreeze.data.params[i].paramInfo || '');
                                                                } else {
                                                                    params[eoFreeze.data.params[i].paramKey] = [params[eoFreeze.data.params[i].paramKey], eoFreeze.data.params[i].paramInfo || ''];
                                                                }
                                                            } else {
                                                                params[eoFreeze.data.params[i].paramKey] = eoFreeze.data.params[i].paramInfo || '';
                                                            }
                                                        }
                                                    }
                                                } else {

                                                    var formJsonData = _requestUtils.HANDLE_PARAMS.handleFormJson(eoFreeze.data.params);
                                                    if (formJsonData.error.status == 1) {
                                                        eoFreeze.data.error = true;
                                                        handleErrorReason(formJsonData.error);
                                                    }
                                                    if (eoFreeze.data.beforeScript) {
                                                        params = JSON.parse(formJsonData.dataParams);
                                                    } else {
                                                        params = formJsonData.dataParams;
                                                    }
                                                }
                                                break;
                                            }
                                        case '1':
                                            {
                                                if (eoFreeze.data.method == 'GET') {
                                                    eoFreeze.data.raw = '';
                                                }
                                                if (eoFreeze.data.raw) {
                                                    eoFreeze.data.raw = _commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.raw, bindResponse, responseHeaders);
                                                }
                                                raw = eoFreeze.data.raw;
                                                break;
                                            }
                                        case '2':
                                            {
                                                if (eoFreeze.data.method == 'GET') {
                                                    eoFreeze.data.params = [];
                                                }

                                                var options = {
                                                    rootType: eoFreeze.request.apiRequestParamJsonType || "0",
                                                    bindResponse: bindResponse,
                                                    responseHeaders: responseHeaders
                                                };
                                                params = _requestUtils.HANDLE_PARAMS.handleJSON(eoFreeze.data.params, options);
                                                break;
                                            }
                                        case '3':
                                            {
                                                if (eoFreeze.data.method == 'GET') {
                                                    eoFreeze.data.params = [];
                                                }
                                                params = _requestUtils.HANDLE_PARAMS.handleJSON(eoFreeze.data.params, {
                                                    rootType: "0",
                                                    bindResponse: bindResponse,
                                                    responseHeaders: responseHeaders
                                                });
                                                break;
                                            }

                                    }

                                    if (eoFreeze.data.auth) {
                                        switch (Number(eoFreeze.data.auth.status)) {
                                            case 1:
                                                {
                                                    if (eoFreeze.data.auth.basicAuth) {
                                                        var str = eoFreeze.data.auth.basicAuth.username + ':' + eoFreeze.data.auth.basicAuth.password;
                                                        headers['Authorization'] = 'Basic ' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str));
                                                    }
                                                    break;
                                                }
                                            case 2:
                                                {
                                                    var compareTable = {
                                                        'query': query,
                                                        'header': headers
                                                    };
                                                    var result = _requestUtils.REQUEST_COMMON.jwtEncode(eoFreeze.data.auth.jwtAuth);
                                                    if (result.type == 'error') {
                                                        eoFreeze.data.error = true;
                                                        handleErrorReason(result.errorReason);
                                                    } else {
                                                        compareTable[eoFreeze.data.auth.jwtAuth.position][eoFreeze.data.auth.jwtAuth.tokenName] = result;
                                                    }
                                                }
                                        }
                                    }
                                    for (var i = 0; i < eoFreeze.data.headers.length;) {
                                        if (!eoFreeze.data.headers[i].headerName || !eoFreeze.data.headers[i].checkbox) {
                                            eoFreeze.data.headers.splice(i, 1);
                                        } else {
                                            headers[_commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.headers[i].headerName, bindResponse, responseHeaders)] = _commonUtils.COMMON_TOOLS.evalBindParam(eoFreeze.data.headers[i].headerValue, bindResponse, responseHeaders);
                                            i++;
                                        }
                                    }
                                };

                                assistantHandleArguments = function assistantHandleArguments(rawParams) {
                                    for (var i = 0; i < rawParams.length;) {
                                        if (!rawParams[i].paramKey || !rawParams[i].checkbox) {
                                            rawParams.splice(i, 1);
                                        } else {
                                            rawParams[i].paramKey = _commonUtils.COMMON_TOOLS.evalBindParam(rawParams[i].paramKey, bindResponse, responseHeaders);
                                            rawParams[i].paramInfo = _commonUtils.COMMON_TOOLS.evalBindParam(rawParams[i].paramInfo, bindResponse, responseHeaders) || '';
                                            i++;
                                        }
                                    }
                                    return rawParams;
                                };

                                getPublicFile = function getPublicFile(fileUrl, uuid) {
                                    return new _promise2.default(function (resolve1, reject1) {
                                        var oReq = new XMLHttpRequest();
                                        oReq.open("get", fileUrl, true);
                                        oReq.onload = reqListener;
                                        oReq.onerror = function () {
                                            reject1();
                                        };
                                        oReq.responseType = "blob";
                                        oReq.send();

                                        function reqListener() {
                                            if (oReq.status == 200) {
                                                _cache.PUBLIC_FILE[uuid] = new Blob();
                                                _cache.PUBLIC_FILE[uuid] = this.response;
                                                resolve1();
                                            } else {
                                                reject1();
                                            }
                                        }
                                    });
                                };

                                handleErrorReason = function handleErrorReason(errorReason) {
                                    errorReasonPatt.errorReason = errorReason;
                                    eoFreeze.data.errorReason = _commonUtils.COMMON_TOOLS.handleErrorReason(errorReasonPatt);
                                };

                                caseData = caseList.singleCaseList[k].caseData;

                                try {
                                    caseData = JSON.parse(caseData);
                                } catch (e) {}
                                error = {};
                                eoFreeze = {
                                    constant: {},
                                    request: {
                                        apiUrl: caseData.URL,
                                        requestHeaders: {},
                                        httpHeader: caseData.httpHeader,
                                        params: {},
                                        beforeTime: new Date(),
                                        apiRequestParamJsonType: caseData.apiRequestParamJsonType || "0",
                                        flagFormDataToJson: !caseData.toJson || _cache.PRODUCT_INFO.productName == 'webCn' ? false : true,
                                        processData: true,
                                        ContentType: 'application/x-www-form-urlencoded;charset=utf-8'
                                    },
                                    setting: {
                                        keepGoing: caseData.keepGoing || false,
                                        judgeSetting: !!caseList.singleCaseList[k].judgeSetting,
                                        timeoutLimit: caseList.singleCaseList[k].timeoutLimit
                                    },
                                    response: {
                                        error: {},
                                        whichXhr: 'success',
                                        responseHeaders: {}
                                    },
                                    report: {
                                        params: {},
                                        requestType: caseData.requestType,
                                        errorText: '',
                                        headers: {}
                                    },
                                    data: {
                                        flagFile: false,
                                        location: caseList.location,
                                        error: false,
                                        httpHeader: caseData.httpHeader,
                                        requestType: caseData.requestType,
                                        method: caseData.apiRequestType,
                                        params: caseData.params,
                                        restfulParams: caseData.restfulParam || [],
                                        raw: caseData.raw,
                                        headers: caseData.headers,
                                        Url: caseData.URL,
                                        env: env,
                                        auth: caseData.auth,
                                        beforeScript: caseData.script ? caseData.script.before : '',
                                        afterScript: caseData.script ? caseData.script.after : '',
                                        fileArr: [],
                                        errorReason: [],
                                        requestRedirect: caseList.singleCaseList[k].advancedSetting && caseList.singleCaseList[k].advancedSetting.requestRedirect == 0 ? false : true
                                    }
                                };
                                errorReasonPatt = {
                                    errorReasonObj: eoFreeze.data.errorReason,
                                    errorReason: []
                                };

                                if (eoFreeze.data.auth && eoFreeze.data.auth.status != '0') {
                                    env.envAuth = {
                                        status: '0'
                                    };
                                }

                                url = '', params = {}, headers = {}, query = {}, raw = '', rest = {};
                                Redirection = {
                                    status: false,
                                    location: ''
                                };
                                host = '';


                                eoFreeze.data.method = _commonUtils.COMMON_TOOLS.judgeRequestMethod(eoFreeze.data.method);

                                for (i = 0; i < eoFreeze.data.params.length; i++) {
                                    if (eoFreeze.data.params[i].paramType == '1') {
                                        eoFreeze.data.flagFile = true;
                                        eoFreeze.data.fileArr.push(eoFreeze.data.params[i].files);
                                    }
                                }

                                i = 0;

                            case 18:
                                if (!(i < eoFreeze.data.fileArr.length)) {
                                    _context.next = 30;
                                    break;
                                }

                                j = 0;

                            case 20:
                                if (!(j < eoFreeze.data.fileArr[i].length)) {
                                    _context.next = 27;
                                    break;
                                }

                                fileUrl = eoFreeze.data.location + "nodeHttpServer/export" + eoFreeze.data.fileArr[i][j].path.slice(1);
                                _context.next = 24;
                                return getPublicFile(fileUrl, eoFreeze.data.fileArr[i][j].uuid).catch(function (e) {
                                    console.log("singleAjax:file no exist");
                                });

                            case 24:
                                j++;
                                _context.next = 20;
                                break;

                            case 27:
                                i++;
                                _context.next = 18;
                                break;

                            case 30:
                                url = eoFreeze.request.apiUrl;
                                queryOrigin = _requestUtils.HANDLE_URL.splitQuery(url);
                                key = Object.key, value = Object.value, entries = _entries4.default;
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 36;

                                for (_iterator = (0, _getIterator3.default)(entries(queryOrigin)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    _ref2 = _step.value;
                                    _ref3 = (0, _slicedToArray3.default)(_ref2, 2);
                                    _key = _ref3[0];
                                    _value = _ref3[1];

                                    query[_commonUtils.COMMON_TOOLS.evalBindParam(_key, bindResponse, responseHeaders)] = _commonUtils.COMMON_TOOLS.evalBindParam(_value, bindResponse, responseHeaders);
                                }
                                _context.next = 44;
                                break;

                            case 40:
                                _context.prev = 40;
                                _context.t0 = _context['catch'](36);
                                _didIteratorError = true;
                                _iteratorError = _context.t0;

                            case 44:
                                _context.prev = 44;
                                _context.prev = 45;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 47:
                                _context.prev = 47;

                                if (!_didIteratorError) {
                                    _context.next = 50;
                                    break;
                                }

                                throw _iteratorError;

                            case 50:
                                return _context.finish(47);

                            case 51:
                                return _context.finish(44);

                            case 52:
                                handleArguments();
                                beforeResponse = (0, _assign2.default)({}, response);

                                if (eoFreeze.data.beforeScript || eoFreeze.data.afterScript) {
                                    eoFreeze.data.eo = _injectCode.INJECT_CODE.defineEo(env);
                                }
                                beforeResult = _injectCode.INJECT_CODE.evalBeforeScript(eoFreeze.data.beforeScript, url, query, headers, params, raw, env, eoFreeze.data.eo, beforeResponse);

                                if (beforeResult.error) {
                                    eoFreeze.data.error = true;
                                    handleErrorReason(beforeResult.errorReason);
                                } else {
                                    url = beforeResult.url;
                                    query = beforeResult.query;
                                    headers = beforeResult.headers;
                                    params = beforeResult.params;
                                    raw = beforeResult.raw;
                                    env = beforeResult.env;
                                }
                                url = _requestUtils.HANDLE_URL.replaceRest(url, rest);
                                eoFreeze.data.flagFile = _requestUtils.HANDLE_PARAMS.judgeFileExist(params);
                                url = _requestUtils.HANDLE_URL.jointQuery(url, query);
                                midEnvReulst = _requestUtils.REQUEST_COMMON.handleEnv(env, url, headers, params, raw, eoFreeze.data.requestType, eoFreeze.request.flagFormDataToJson);

                                if (midEnvReulst.type == 'error') {
                                    eoFreeze.data.error = true;
                                    handleErrorReason(midEnvReulst.errorReason);
                                }
                                url = midEnvReulst.url;
                                headers = midEnvReulst.headers;
                                params = midEnvReulst.params;
                                raw = midEnvReulst.raw;
                                midRequestParams = _requestUtils.HANDLE_PARAMS.handleRequestParams(headers, eoFreeze.data.requestType, eoFreeze.request.flagFormDataToJson, eoFreeze.data.flagFile, params, raw, eoFreeze.request.ContentType, eoFreeze.request.processData, eoFreeze.report.requestType);

                                if (eoFreeze.data.method == 'GET') {
                                    eoFreeze.report.params = null;
                                    eoFreeze.request.params = null;
                                } else {
                                    eoFreeze.report.params = midRequestParams.report;
                                    eoFreeze.request.params = midRequestParams.request;
                                }
                                eoFreeze.request.processData = midRequestParams.processData;
                                eoFreeze.request.ContentType = midRequestParams.ContentType;
                                eoFreeze.report.requestType = midRequestParams.reportType;
                                url = _requestUtils.HANDLE_URL.handleProtocol(url, eoFreeze.request.httpHeader);
                                errorBackResult = {
                                    type: 'auto',
                                    caseListIndex: caseListIndex,
                                    k: k,
                                    url: url,
                                    testDeny: 0,
                                    startTime: codeTestTime.startTime,
                                    data: eoFreeze.data,
                                    caseData: caseList.singleCaseList,
                                    request: eoFreeze.request,
                                    jsonResultVerification: caseList.singleCaseList[k].jsonResultVerification,
                                    report: eoFreeze.report,
                                    backResult: backResult,
                                    errorReason: "",
                                    responseType: "error"
                                };
                                headerResult = _requestUtils.HANDLE_HEADER.isLegal(headers);

                                if (headerResult.error) {
                                    eoFreeze.data.error = true;
                                    handleErrorReason(headerResult.errorReason);
                                }

                                if (!eoFreeze.data.error) {
                                    _context.next = 80;
                                    break;
                                }

                                errorBackResult.errorReason = eoFreeze.data.errorReason;
                                _commonUtils.COMMON_TOOLS.postError(errorBackResult);
                                reject('BRFORE AJAX ERROR');
                                return _context.abrupt('return');

                            case 80:
                                window.parent.chrome.webRequest.onBeforeSendHeaders.addListener(handleRequestHeaders, {
                                    urls: ["http://*/*", "https://*/*"],
                                    types: ["xmlhttprequest"]
                                }, ["blocking", "requestHeaders"]);
                                window.parent.chrome.webRequest.onHeadersReceived.addListener(getResponseHeaders, {
                                    urls: ["http://*/*", "https://*/*"]
                                }, ["responseHeaders", "blocking"]);
                                if (eoFreeze.data.method == 'GET') {
                                    eoFreeze.request.ContentType = false;
                                }
                                timeoutFun = null;
                                Ajax = $.ajax({
                                    url: url,
                                    traditional: true,
                                    beforeSend: function beforeSend(request) {
                                        eoFreeze.request.beforeTime = new Date();
                                        if (!/^[1-9]\d*$/.test(eoFreeze.setting.timeoutLimit)) {
                                            eoFreeze.setting.timeoutLimit = 10000;
                                        }
                                        timeoutFun = setTimeout(function () {
                                            Ajax.abort();
                                            errorBackResult.testDeny = eoFreeze.setting.timeoutLimit;
                                            errorBackResult.responseType = "timeout";
                                            _commonUtils.COMMON_TOOLS.postError(errorBackResult);
                                            reject('TIMEOUT');
                                        }, Number(eoFreeze.setting.timeoutLimit));
                                    },
                                    contentType: eoFreeze.request.ContentType,
                                    processData: eoFreeze.request.processData,
                                    type: eoFreeze.data.method,
                                    async: true,
                                    data: eoFreeze.request.params
                                }).done(function (successData, textStatus, xhr) {
                                    clearTimeout(timeoutFun);
                                    eoFreeze.response.whichXhr = 'success';
                                }).fail(function (xhr, textStatus) {
                                    clearTimeout(timeoutFun);
                                    eoFreeze.response.whichXhr = 'error';
                                }).always(function (successData, textStatus, jqXHR) {
                                    chrome.webRequest.onBeforeSendHeaders.removeListener(handleRequestHeaders);
                                    chrome.webRequest.onHeadersReceived.removeListener(getResponseHeaders);
                                    if (textStatus != 'abort') {
                                        var matchType = caseList.singleCaseList[k].matchType;
                                        var matchRule = caseList.singleCaseList[k].matchRule;
                                        caseList.singleCaseList[k].responseHeaderVerification = caseList.singleCaseList[k].responseHeaderVerification || {};
                                        var headerRule = caseList.singleCaseList[k].responseHeaderVerification.matchRule || [];
                                        var headerType = caseList.singleCaseList[k].responseHeaderVerification.matchType;
                                        var keepGoing = eoFreeze.setting.keepGoing;
                                        var judgeSetting = eoFreeze.setting.judgeSetting || false;
                                        var jsonResultVerification = caseList.singleCaseList[k].jsonResultVerification || {};
                                        var resultParamType = caseList.singleCaseList[k].resultParamType || 0;

                                        var isMatch = true;
                                        var responseType = 'success';
                                        var matchStatusCode = caseList.singleCaseList[k].statusCode;
                                        var isStopTest = false;
                                        var xhr;
                                        if (eoFreeze.response.whichXhr == 'success') {
                                            xhr = jqXHR;
                                        } else {
                                            xhr = successData;
                                        }
                                        var caseListID = 0;
                                        if (caseListIndex != 0) {
                                            caseListID = caseListIndex - 1;
                                        } else {
                                            caseListID = k;
                                        }
                                        var statusCode = xhr.status;
                                        var testDeny = new Date() - eoFreeze.request.beforeTime;
                                        var responseText = xhr.responseText;
                                        if (!eoFreeze.data.requestRedirect && AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[k + 1]]) {
                                            var requestInfo = AllRequestInfo[AllRequestInfo.apiLocation[k + 1]][0];
                                            statusCode = requestInfo.statusCode;
                                            url = requestInfo.url;
                                            eoFreeze.request.requestHeaders = requestInfo.requestHeaders;
                                            eoFreeze.response.responseHeaders = requestInfo.responseHeaders;
                                            responseText = '';
                                            testDeny = requestInfo.testTime - eoFreeze.request.beforeTime;
                                        }
                                        errorBackResult.testDeny = testDeny;
                                        if (statusCode == 0) {
                                            _commonUtils.COMMON_TOOLS.postError(errorBackResult);
                                            reject('afterScript error');
                                            return;
                                        };

                                        var afterResultResponse = responseText;

                                        if (eoFreeze.data.afterScript && !(eoFreeze.data.requestRedirect == false && AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[k + 1]])) {
                                            var afterResult = _injectCode.INJECT_CODE.evalAfterScript(eoFreeze.data.afterScript, afterResultResponse, env, eoFreeze.data.eo);
                                            if (afterResult.error) {
                                                handleErrorReason(afterResult.errorReason);
                                                errorBackResult.errorReason = eoFreeze.data.errorReason;
                                                errorBackResult.responseHeaders = eoFreeze.response.responseHeaders;
                                                errorBackResult.response = afterResultResponse;
                                                _commonUtils.COMMON_TOOLS.postError(errorBackResult);
                                                reject('afterScript error');
                                                return;
                                            } else {

                                                afterResultResponse = afterResult.response;
                                                env = afterResult.env;
                                            }
                                        }
                                        try {
                                            if (typeof afterResultResponse != 'string') {
                                                responseText = (0, _stringify2.default)(afterResultResponse);
                                                if ((0, _stringify2.default)(JSON.parse(xhr.responseText)) == responseText) {
                                                    responseText = xhr.responseText;
                                                }
                                            } else {
                                                responseText = afterResultResponse;
                                            }
                                        } catch (e) {};
                                        var singleBindResponse = afterResultResponse;
                                        switch (Number(resultParamType)) {
                                            case 1:
                                                {
                                                    try {
                                                        if (typeof afterResultResponse == 'string') {
                                                            singleBindResponse = $.xml2json(afterResultResponse);
                                                        }
                                                    } catch (e) {};
                                                    break;
                                                }
                                            case 2:
                                                {
                                                    singleBindResponse = {
                                                        raw: responseText
                                                    };
                                                    break;
                                                }
                                            default:
                                                {
                                                    try {
                                                        if (typeof afterResultResponse == 'string') {
                                                            singleBindResponse = JSON.parse(afterResultResponse);
                                                        }
                                                    } catch (e) {};
                                                }
                                        }
                                        bindResponse[caseList.singleCaseList[k].connID] = singleBindResponse;
                                        response[caseList.singleCaseList[k].connID] = afterResultResponse;
                                        responseHeaders[caseList.singleCaseList[k].connID] = eoFreeze.response.responseHeaders;
                                        isMatch = _commonUtils.COMMON_TOOLS.judgeResponseHeaders({
                                            headerType: headerType,
                                            headerRule: headerRule,
                                            response: response,
                                            judgeSetting: judgeSetting,
                                            allResponseHeaders: responseHeaders,
                                            responseHeaders: eoFreeze.response.responseHeaders,
                                            callback: handleErrorReason
                                        });
                                        if (judgeSetting || isMatch == true) {
                                            if (matchType == 3) {} else {
                                                if (statusCode != matchStatusCode) {
                                                    isMatch = false;
                                                    handleErrorReason(_commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.Match.statusCode[_cache.PRODUCT_INFO.lang], [matchStatusCode, statusCode]));
                                                }
                                                if (isMatch || judgeSetting) switch (matchType) {
                                                    case 2:
                                                        {
                                                            var _json = afterResultResponse;
                                                            try {
                                                                if (typeof afterResultResponse == 'string') {
                                                                    _json = JSON.parse(afterResultResponse);
                                                                }
                                                            } catch (e) {};
                                                            var match = matchRule;
                                                            var result = _commonUtils.COMMON_TOOLS.selfLoopMatchJson(match, _json, judgeSetting, response, responseHeaders, jsonResultVerification);
                                                            if (!result.isMatch) {
                                                                isMatch = false;
                                                                handleErrorReason(result.errorReason);
                                                            }
                                                            break;
                                                        }
                                                    case 0:
                                                        {
                                                            if (responseText != matchRule) {
                                                                isMatch = false;
                                                                handleErrorReason(_constant.CONSTANT.LANG.Match.all[_cache.PRODUCT_INFO.lang]);
                                                            }
                                                            break;
                                                        }
                                                    case 1:
                                                        {
                                                            try {
                                                                var patt = new RegExp(matchRule);
                                                                if (!patt.test(responseText)) {
                                                                    isMatch = false;
                                                                    handleErrorReason(_constant.CONSTANT.LANG.Match.patt[_cache.PRODUCT_INFO.lang]);
                                                                }
                                                            } catch (e) {
                                                                isMatch = false;
                                                                handleErrorReason(_constant.CONSTANT.LANG.PattError[_cache.PRODUCT_INFO.lang]);
                                                            }
                                                            break;
                                                        }
                                                    case 4:
                                                        {
                                                            var _match = matchRule;
                                                            try {
                                                                var json = $.xml2json(responseText);
                                                                var result = _commonUtils.COMMON_TOOLS.selfLoopMatchJson(_match, json, judgeSetting, response, responseHeaders);
                                                                if (!result.isMatch) {
                                                                    isMatch = false;
                                                                    handleErrorReason(result.errorReason);
                                                                }
                                                            } catch (e) {
                                                                if (e) {
                                                                    isMatch = false;
                                                                    handleErrorReason(_constant.CONSTANT.LANG.XmlError[_cache.PRODUCT_INFO.lang]);
                                                                }
                                                            }
                                                        }
                                                }
                                            }
                                        }
                                        if (isMatch == false) {
                                            responseType = 'matchError';
                                            isStopTest = keepGoing ? false : true;
                                        }

                                        backResult.responseList[caseListID] = {
                                            apiIndex: caseListID,
                                            isStopTest: isStopTest,
                                            connID: caseList.singleCaseList[k].connID,
                                            general: {
                                                time: testDeny + 'ms',
                                                requestUrl: url,
                                                requestMethod: eoFreeze.data.method,
                                                statusCode: statusCode,
                                                name: caseList.singleCaseList[k].apiName,
                                                match: {
                                                    keepGoing: keepGoing,
                                                    jsonResultVerification: jsonResultVerification,
                                                    headerRule: headerRule,
                                                    headerType: headerType,
                                                    rule: matchRule,
                                                    type: matchType,
                                                    statusCode: matchStatusCode
                                                }
                                            },
                                            responseHeaders: (0, _stringify2.default)(eoFreeze.response.responseHeaders) == '{}' ? null : eoFreeze.response.responseHeaders,
                                            requestHeaders: (0, _stringify2.default)(eoFreeze.request.requestHeaders) == '{}' ? null : eoFreeze.request.requestHeaders,
                                            requestBody: {
                                                requestType: eoFreeze.report.requestType,
                                                body: eoFreeze.report.params
                                            },
                                            response: responseText,
                                            errorReason: eoFreeze.data.errorReason,
                                            responseType: responseType
                                        };
                                        if (isStopTest || k == caseLen - 1) {
                                            codeTestTime.finishTime = new Date();
                                            codeTestTime.finishTime = codeTestTime.finishTime - codeTestTime.startTime;
                                            backResult.time = codeTestTime.finishTime + "ms";
                                        }
                                        if (isMatch == false || isStopTest) {
                                            backResult.reportStatus = 'error';
                                        }
                                        if (batchIndex == undefined) {
                                            if (auto) {
                                                auto.postMessage(backResult);
                                            }
                                        }

                                        if (isStopTest) {
                                            reject('CASE ERROR');
                                        } else {
                                            resolve('FINISH');
                                        }
                                    }
                                });

                                if (batchIndex != undefined) {
                                    _trans.TRANS.ajaxs.push(Ajax);
                                } else {
                                    if (caseListIndex == 0) {
                                        _trans.TRANS.ajaxs[k] = Ajax;
                                    } else {
                                        _trans.TRANS.ajaxs[caseListIndex - 1] = Ajax;
                                    }
                                }

                            case 86:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[36, 40, 44, 52], [45,, 47, 51]]);
            }));

            return function (_x, _x2) {
                return _ref.apply(this, arguments);
            };
        }());
    }

    codeTestTime.startTime = new Date();
    asyncControl().then(function () {
        if (which == 'before') {
            resolve('beforeCase' + listIndex + ': END');
        } else if (which == 'after') {
            resolve('afterCase' + listIndex + ': END');
        } else {
            afterCase();
        }
    }).catch(function (e) {
        console.log("asyncControl:auto " + e);
        if (which == 'before') {
            resolve('beforeCase' + listIndex + ': END');
        } else if (which == 'after') {
            resolve('afterCase' + listIndex + ': END');
        } else {
            afterCase();
        }
    });

    function afterCase() {
        if (caseList.afterCase.envCaseList != false) {
            caseList.afterCase.env = env;
            caseList.afterCase.isAfter = true;
            (0, _envCase.handleCaseCode)(caseList.afterCase).then(function (result) {
                backResult.afterCaseReportList = result.report;
                if (auto) {
                    auto.postMessage(backResult);
                }
            }).catch(function (e) {
                console.log('afterCase', e);
            });
        } else {
            if (auto) {
                auto.postMessage(backResult);
            }
        }
    }
};
_trans.TRANS.autoUiTest = function (caseList, auto) {
    var auto_Test = function () {
        var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
            var autoData, env, backResult, paramList, i, headerList, additionalParamList, which;
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            autoData = {
                                preCode: {
                                    result: {
                                        report: []
                                    },
                                    stopStatus: true
                                }
                            };
                            env = {
                                baseUrl: '',
                                headers: {},
                                extraParams: {},
                                globalParams: {}
                            };
                            backResult = {
                                beforeCaseReportList: autoData.preCode.result.report,
                                reportStatus: 'finish',
                                time: '0ms',
                                afterCaseReportList: [],
                                responseList: [{
                                    responseType: "success"
                                }],
                                status: 'tested'
                            };

                            if (!(caseList.beforeCase.envCaseList != false)) {
                                _context3.next = 8;
                                break;
                            }

                            _context3.next = 6;
                            return (0, _envCase.handleCaseCode)(caseList.beforeCase).then(function (result) {
                                autoData.preCode.result = result;
                                backResult.beforeCaseReportList = autoData.preCode.result.report;
                                env = result.env;
                            }).catch(function (e) {
                                console.log("beforeInject Error", e);
                            });

                        case 6:
                            _context3.next = 9;
                            break;

                        case 8:
                            if (!$.isEmptyObject(caseList.env)) {
                                if (_cache.PRODUCT_INFO.productName == 'webCn' || _cache.PRODUCT_INFO.productName == 'webEn' || _cache.PRODUCT_INFO.productName == 'independent' && _cache.PRODUCT_INFO.version >= '4.1') {
                                    env.baseUrl = env.baseUrl == '' ? caseList.env.frontURI : env.baseUrl;
                                } else {
                                    if (caseList.env.frontURIList[0]) {
                                        env.baseUrl = env.baseUrl == '' ? caseList.env.frontURIList[0].uri : env.baseUrl;
                                    }
                                }
                                paramList = {};

                                for (i = 0; i < caseList.env.paramList.length; i++) {
                                    paramList[caseList.env.paramList[i].paramKey] = caseList.env.paramList[i].paramValue;
                                }
                                headerList = {};

                                for (i = 0; i < caseList.env.headerList.length; i++) {
                                    headerList[caseList.env.headerList[i].headerName] = caseList.env.headerList[i].headerValue;
                                }
                                additionalParamList = {};

                                for (i = 0; i < caseList.env.additionalParamList.length; i++) {
                                    additionalParamList[caseList.env.additionalParamList[i].paramKey] = caseList.env.additionalParamList[i].paramValue;
                                }
                                env.headers = (0, _assign2.default)({}, headerList, env.headers);
                                env.extraParams = (0, _assign2.default)({}, additionalParamList, env.extraParams);
                                env.globalParams = (0, _assign2.default)({}, paramList, env.globalParams);
                                env.envAuth = (0, _assign2.default)({}, caseList.env.envAuth);
                            }

                        case 9:
                            if (!_trans.TRANS.stopStatus) {
                                which = 'auto';

                                EVAL_AUTOUI(caseList, env, backResult, auto, which);
                            }

                        case 10:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        return function auto_Test() {
            return _ref7.apply(this, arguments);
        };
    }();

    auto_Test();
};

/***/ }),
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EVAL_AUTOCODE = undefined;

var _regenerator = __webpack_require__(38);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = __webpack_require__(10);

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = __webpack_require__(39);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _freeze = __webpack_require__(127);

var _freeze2 = _interopRequireDefault(_freeze);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = __webpack_require__(21);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries2 = __webpack_require__(22);

var _entries3 = _interopRequireDefault(_entries2);

var _values = __webpack_require__(130);

var _values2 = _interopRequireDefault(_values);

var _keys = __webpack_require__(26);

var _keys2 = _interopRequireDefault(_keys);

var _stringify = __webpack_require__(3);

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = __webpack_require__(29);

var _promise2 = _interopRequireDefault(_promise);

var _commonUtils = __webpack_require__(9);

var _requestUtils = __webpack_require__(28);

var _cache = __webpack_require__(8);

var _envCase = __webpack_require__(54);

var _constant = __webpack_require__(6);

var _trans = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVAL_AUTOCODE = exports.EVAL_AUTOCODE = function EVAL_AUTOCODE(caseInfo, env, reportList, autoCode, which, resolve, reject, listIndex) {
    var caseCode = caseInfo.caseCode;
    var batchIndex = caseInfo.batchIndex || 0;
    var codeTestTime = {
        startTime: null,
        finishTime: null
    };
    var executeIndex = -1;
    var contentType = 'application/x-www-form-urlencoded;charset=utf-8';
    var processData = true;
    var requestType = '0';
    var AllRequestInfo = {
        apiLocation: {},
        redirectObj: {}
    };

    function throwFun(reportList, index, type, report) {
        if (reportList.responseList[index]) {
            reportList.responseList[index].general.status = type;
            reportList.responseList[index].reportList.push(report);
        } else {
            reportList.initReportList.push(report);
        }
        throw 'ignore';
    }

    var eo = {
        userFunction: {},
        execute: null,
        stop: null,
        info: null,
        sha1: null,
        md5: null,
        sha256: null,
        img: null,
        file: null
    };
    if (_cache.CACHE.COMMON_FUNCTION) {
        var funStrdfs110ss = '';
        _cache.CACHE.COMMON_FUNCTION = _cache.CACHE.COMMON_FUNCTION || [];
        _cache.CACHE.COMMON_FUNCTION.forEach(function (val, key) {
            var paramStrffds5s78j = '';
            val.functionParam.forEach(function (val1, key1) {
                paramStrffds5s78j = paramStrffds5s78j + val1.paramKey + ',';
            });
            funStrdfs110ss = 'eo.userFunction["' + val.functionKey + '"] = function (' + paramStrffds5s78j + '){' + val.functionCode + '};\n';
            try {
                eval(funStrdfs110ss);
            } catch (e) {}
        });
        funStrdfs110ss = null;
    }
    eo.execute = function (apiInfo) {
        if (_trans.TRANS.stopStatus) throw "stop";
        return new _promise2.default(function (resolve, reject) {
            executeIndex++;
            reportList.totalApi++;
            contentType = 'application/x-www-form-urlencoded;charset=utf-8';
            if (apiInfo && apiInfo.url) {
                var handleRequestHeaders = function handleRequestHeaders(details) {
                    if (!details.initiator) {
                        if (navigator.userAgent.indexOf('Firefox') > -1) {
                            details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
                        } else {
                            for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                                if (details.requestHeaders[j].name.toLowerCase() == 'origin') {
                                    details.initiator = details.requestHeaders[j].value;
                                    break;
                                }
                            }
                        }
                    }
                    var url1 = _requestUtils.HANDLE_URL.handleRightUrl(url);

                    if ((details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) && (details.url.indexOf(url1) > -1 || Redirection.status && details.url.indexOf(Redirection.location) > -1)) {
                        var _entries = _entries3.default;

                        details.requestHeaders.push({
                            name: 'Cache-Control',
                            value: 'no-cache'
                        });
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = (0, _getIterator3.default)(_entries(headers)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var _ref3 = _step2.value;

                                var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

                                var _key = _ref4[0];
                                var _value = _ref4[1];

                                var headerFlag = false;
                                _value = (_value || '').toString();

                                for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                                    if (details.requestHeaders[j].name.toLowerCase() == _key.toLowerCase()) {
                                        headerFlag = true;
                                        if (_key.toLowerCase() == 'cookie') {
                                            _commonUtils.COMMON_TOOLS.setCookieObj({
                                                url: details.url,
                                                cookies: _value
                                            });
                                            _value = _commonUtils.COMMON_TOOLS.replaceCookieStr(details.requestHeaders[j].value, _value);
                                        }
                                        if (_value.indexOf('multipart/form-data') <= -1) {
                                            details.requestHeaders[j].name = _key;
                                            details.requestHeaders[j].value = _value;
                                        }
                                    }
                                }

                                if (headerFlag == false) {
                                    if (_key.toLowerCase() == 'cookie') {
                                        _commonUtils.COMMON_TOOLS.setCookieObj({
                                            url: details.url,
                                            cookies: _value
                                        });
                                    }
                                    details.requestHeaders.push({
                                        name: _key,
                                        value: _value
                                    });
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                            requestHeaders[details.requestHeaders[j].name] = details.requestHeaders[j].value;
                        }
                        chrome.cookies.getAll({
                            url: details.url
                        }, function (cookies) {
                            requestHeaders['cookie'] = _commonUtils.COMMON_TOOLS.jointCookieObj({
                                cookies: cookies,
                                type: 'array'
                            });
                        });
                        AllRequestInfo[details.requestId] = AllRequestInfo[details.requestId] || [];
                        AllRequestInfo[details.requestId].push({
                            url: details.url,
                            requestHeaders: requestHeaders,
                            statusCode: 0
                        });
                        AllRequestInfo.apiLocation[(0, _keys2.default)(AllRequestInfo).length - 2] = details.requestId;
                    }
                    return {
                        requestHeaders: details.requestHeaders
                    };
                };

                var getResponseHeaders = function getResponseHeaders(details) {
                    if (!details.initiator) {
                        if (navigator.userAgent.indexOf('Firefox') > -1) {
                            details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
                        } else {
                            details.initiator = '';
                        }
                    }
                    var url1 = _requestUtils.HANDLE_URL.handleRightUrl(url);
                    if ((details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) && (details.url.indexOf(url1) > -1 || Redirection.status)) {
                        var host = _requestUtils.HANDLE_URL.destRequestUrl(details.url).hostname;
                        if (/^3\d+/.test(details.statusCode)) {
                            Redirection.status = true;
                            AllRequestInfo.redirectObj[details.requestId] = true;
                        }
                        details.responseHeaders.forEach(function (header) {
                            header.name = header.name.toLowerCase();
                            if (header.name == 'location') {
                                Redirection.location = header.value;
                            }

                            if (header.name in responseHeaders) {
                                responseHeaders[header.name] = responseHeaders[header.name] + ";" + header.value;
                            } else {
                                responseHeaders[header.name] = header.value;
                            }
                        });
                        var requestIndex = AllRequestInfo[details.requestId].length - 1;
                        AllRequestInfo[details.requestId][requestIndex].responseHeaders = responseHeaders;
                        AllRequestInfo[details.requestId][requestIndex].statusCode = details.statusCode;
                        AllRequestInfo[details.requestId][requestIndex].testTime = new Date();
                    }
                };

                var url = apiInfo.url,
                    name = apiInfo.name || '',
                    params = apiInfo.params || {},
                    headers = apiInfo.headers || {},
                    method = apiInfo.method || 'GET',
                    timelimit = apiInfo.timelimit,
                    redirect = apiInfo.redirect == false ? false : true,
                    timelimitContinue = apiInfo.timelimitContinue;
                var dataParams = null;
                var responseHeaders = {};
                var isFileRequest = false;

                if (timelimitContinue == undefined) {
                    timelimitContinue = true;
                }

                var beforeTime = null;
                var responseList = {};
                var requestHeaders = {};

                var whichXhr = 'success';
                method = method.toUpperCase();
                requestType = '0';

                var Redirection = {
                    status: false,
                    location: ''
                };
                if (timelimit == null) {
                    timelimit = 10000;
                }
                if (typeof params == 'string') {
                    requestType = '1';
                }
                var midEnvReulst = _requestUtils.REQUEST_COMMON.handleEnv(env, url, headers, params, "", requestType, false);
                if (midEnvReulst.type == 'error') {
                    reportList.status = 'error';
                    var report = {
                        type: "error",
                        content: midEnvReulst.errorReason
                    };
                    throwFun(reportList, executeIndex, "error", report);
                } else {
                    url = midEnvReulst.url;
                    headers = midEnvReulst.headers;
                    params = midEnvReulst.params;
                }
                if (method == 'GET') {
                    url = _requestUtils.HANDLE_URL.jointQuery(url, params);
                    params = '';
                }
                var midheaders = (0, _stringify2.default)(headers).toLowerCase();
                midheaders = JSON.parse(midheaders);
                if (midheaders["content-type"]) {
                    contentType = midheaders["content-type"];
                    if (midheaders["content-type"].toLowerCase().indexOf('multipart/form-data') > -1) {
                        isFileRequest = true;
                        contentType = false;
                    }
                }
                if (typeof params == 'string') {
                    requestType = '1';
                }
                if (_requestUtils.HANDLE_PARAMS.judgeFileExist(params) && isFileRequest || contentType == false) {
                    contentType = false;
                    processData = false;
                    var keys = _keys2.default,
                        values = _values2.default,
                        entries = _entries3.default;

                    dataParams = new FormData();
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = (0, _getIterator3.default)(entries(params)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var _ref = _step.value;

                            var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                            var key = _ref2[0];
                            var value = _ref2[1];

                            if (Object.prototype.toString.call(value) == '[object Blob]') {
                                dataParams.append(key, value, value.name || key);
                                params[key] = '[object Blob]';
                            } else {
                                dataParams.append(key, value);
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                } else {
                    dataParams = params;
                }
                if (url.substring(0, 7) != "http://" && url.substring(0, 8) != "https://") {
                    url = 'http://' + url;
                }
                var headerResult = _requestUtils.HANDLE_HEADER.isLegal(headers);
                if (headerResult.error) {
                    reportList.responseList[executeIndex] = {
                        apiIndex: executeIndex,
                        general: {
                            time: '0ms',
                            requestUrl: url,
                            status: 'error',
                            requestMethod: method,
                            timeLimit: timelimit,
                            name: name
                        },
                        responseHeaders: null,
                        requestHeaders: headers,
                        requestBody: {
                            requestType: requestType,
                            body: params || null

                        },
                        response: null,
                        reportList: [{
                            type: 'error',
                            content: headerResult.errorReason
                        }]
                    };
                    resolve();
                    return;
                }

                window.parent.chrome.webRequest.onBeforeSendHeaders.addListener(handleRequestHeaders, {
                    urls: ["http://*/*", "https://*/*"],
                    types: ["xmlhttprequest"]
                }, ["blocking", "requestHeaders"]);
                window.parent.chrome.webRequest.onHeadersReceived.addListener(getResponseHeaders, {
                    urls: ["<all_urls>"]
                }, ["responseHeaders", "blocking"]);
                var timeout = null;
                if (method == 'GET') {
                    contentType = false;
                }
                var Ajax = $.ajax({
                    url: url,
                    beforeSend: function beforeSend(request) {
                        beforeTime = new Date();
                        function abortTimeout() {
                            reportList.responseList[executeIndex] = {
                                apiIndex: executeIndex,
                                general: {
                                    time: timelimit + 'ms',
                                    requestUrl: url,
                                    status: 'timeout',
                                    requestMethod: method,
                                    timeLimit: timelimit,
                                    name: name
                                },
                                responseHeaders: null,
                                requestHeaders: (0, _stringify2.default)(requestHeaders) == '{}' ? null : requestHeaders,
                                requestBody: {
                                    requestType: requestType,
                                    body: params || null

                                },
                                response: null,
                                reportList: [{
                                    type: 'timeout',
                                    content: _constant.CONSTANT.LANG.Timeout[_cache.PRODUCT_INFO.lang]
                                }]
                            };
                            if (!timelimitContinue) {
                                reject('ignore');
                                reportList.status = 'timeout';
                            }
                            Ajax.abort();
                        }
                        if (timelimit == 0) {
                            timelimit = 30000;
                        }
                        timeout = setTimeout(abortTimeout, Number(timelimit));
                    },
                    async: true,
                    method: method,
                    data: dataParams,
                    processData: processData,
                    contentType: contentType
                }).done(function (successData, textStatus, xhr) {
                    clearTimeout(timeout);
                    whichXhr = 'success';
                }).fail(function (xhr, textStatus, message) {
                    clearTimeout(timeout);
                    whichXhr = 'error';

                    if (textStatus == 'abort' && reportList.responseList[executeIndex] && !timelimitContinue) {
                        reject('ignore');
                    }
                }).always(function (successData, textStatus, jqXHR) {
                    chrome.webRequest.onBeforeSendHeaders.removeListener(handleRequestHeaders);
                    chrome.webRequest.onHeadersReceived.removeListener(getResponseHeaders);
                    contentType = 'application/x-www-form-urlencoded;charset=utf-8';
                    processData = true;

                    var xhr;
                    if (whichXhr == 'success') {
                        xhr = jqXHR;
                    } else {
                        xhr = successData;
                    }
                    var statusCode = xhr.status;

                    if (reportList.responseList[executeIndex]) {
                        testDeny = timelimit;

                        if (!redirect && AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[executeIndex + 1]]) {
                            var detailsInfo = AllRequestInfo[AllRequestInfo.apiLocation[executeIndex + 1]] || [];
                            var requestInfo = detailsInfo[0];
                            statusCode = requestInfo.statusCode;
                            url = requestInfo.url;
                            requestHeaders = requestInfo.requestHeaders;
                            responseHeaders = requestInfo.responseHeaders;
                            body = '';
                            testDeny = requestInfo.testTime - beforeTime;
                            reportList.responseList[executeIndex] = {
                                apiIndex: executeIndex,
                                general: {
                                    time: testDeny + 'ms',
                                    requestUrl: url,
                                    status: 'finish',
                                    requestMethod: method,
                                    timeLimit: timelimit,
                                    statusCode: statusCode,
                                    name: name
                                },
                                requestBody: {
                                    requestType: requestType,
                                    body: params
                                },
                                response: body,
                                responseHeaders: (0, _stringify2.default)(responseHeaders) == '{}' ? null : responseHeaders,
                                requestHeaders: (0, _stringify2.default)(requestHeaders) == '{}' ? null : requestHeaders,
                                reportList: []
                            };
                        }
                    } else {
                        var testDeny = new Date() - beforeTime;
                        var body = xhr.responseText;
                        if (!redirect) {
                            var _detailsInfo = AllRequestInfo[AllRequestInfo.apiLocation[executeIndex + 1]] || [];
                            var _requestInfo = _detailsInfo[0];
                            if (AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[executeIndex + 1]]) {
                                statusCode = _requestInfo.statusCode;
                                url = _requestInfo.url;
                                requestHeaders = _requestInfo.requestHeaders;
                                responseHeaders = _requestInfo.responseHeaders;
                                body = '';
                                testDeny = _requestInfo.testTime - beforeTime;
                            }
                        }
                        var subReportList = [];
                        var status = 'finish';
                        var response = null;
                        if (xhr.status != 0) {} else {

                            responseHeaders = null;
                            subReportList = [{
                                type: 'error',
                                content: 'target server no answer'
                            }];
                            status = 'error';
                        }
                        reportList.responseList[executeIndex] = {
                            apiIndex: executeIndex,
                            general: {
                                time: testDeny + 'ms',
                                requestUrl: url,
                                status: status,
                                requestMethod: method,
                                timeLimit: timelimit,
                                statusCode: statusCode,
                                name: name
                            },
                            requestBody: {
                                requestType: requestType,
                                body: params
                            },
                            response: body,
                            responseHeaders: (0, _stringify2.default)(responseHeaders) == '{}' ? null : responseHeaders,
                            requestHeaders: (0, _stringify2.default)(requestHeaders) == '{}' ? null : requestHeaders,
                            reportList: subReportList
                        };
                    }

                    resolve({
                        time: testDeny + 'ms',
                        code: statusCode,
                        response: body,
                        header: responseHeaders
                    });
                });
                _trans.TRANS.ajaxs.push(Ajax);
            } else {
                var index = executeIndex + 1;
                var text = _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.EoFun.excute[_cache.PRODUCT_INFO.lang], [index]);
                reject(text);
            }
        });
    };

    eo.stop = function (index, info) {
        reportList.status = 'interrupt';
        var report = {
            type: 'interrupt',
            content: info,
            lineNum: index
        };
        throwFun(reportList, executeIndex, "interrupt", report);
    };

    eo.executeBeforeCode = function (apiInfo, beforeScript) {
        var params = {};
        var raw = '';
        if (typeof apiInfo.params == 'string') {
            raw = apiInfo.params;
        } else {
            params = apiInfo.params;
        }
        var headers = apiInfo.headers;
        var url = apiInfo.url;
        var query = _requestUtils.HANDLE_URL.splitQuery(url);
        try {
            eval(beforeScript);
            url = _requestUtils.HANDLE_URL.jointQuery(url, query);
            apiInfo.url = url;
            apiInfo.headers = headers;
            if (typeof apiInfo.params == 'string') {
                apiInfo.params = raw;
            } else {
                apiInfo.params = params;
            }
            return apiInfo;
        } catch (e) {
            var errorReason = '';
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                errorReason = e.toString();
            } else {
                errorReason = e.message;
            }
            reportList.status = 'codeError';
            reportList.errorReport = {
                content: errorReason
            };
            throw 'ignore';
        }
    };
    eo.executeAfterCode = function (response, afterScript) {
        try {
            eval(afterScript);

            return response;
        } catch (e) {
            var errorReason = '';
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                errorReason = e.toString();
            } else {
                errorReason = e.message;
            }
            reportList.status = 'codeError';
            reportList.errorReport = {
                content: errorReason
            };
            throw 'ignore';
        }
    };
    eo.info = function (index, info, isStop) {
        var eoLinker_type = isStop ? 'info' : 'throw';

        var report = {
            type: eoLinker_type,
            content: info,
            lineNum: index
        };
        if (reportList.responseList[executeIndex]) {
            reportList.responseList[executeIndex].reportList.push(report);
        } else {
            reportList.initReportList.push(report);
        }
        if (isStop) {
            throw 'ignore';
        }
    };
    eo.img = function (fileName) {
        if (fileName && (fileName.toLowerCase() == 'jpg' || fileName.toLowerCase() == 'png' || fileName.toLowerCase() == 'gif')) {
            return _cache.COMMON_FILE[fileName.toLowerCase()];
        } else {
            reportList.status = 'codeError';
            reportList.errorReport = {
                content: _constant.CONSTANT.LANG.EoFun.eoImg[_cache.PRODUCT_INFO.lang]
            };
            throw 'ignore';
        }
    };
    eo.file = function (fileName) {
        if (fileName && (fileName.toLowerCase() == 'txt' || fileName.toLowerCase() == 'none' || fileName.toLowerCase() == 'doc' || fileName.toLowerCase() == 'docx' || fileName.toLowerCase() == 'pdf')) {
            return _cache.COMMON_FILE[fileName.toLowerCase()];
        } else {
            reportList.status = 'codeError';
            reportList.errorReport = {
                content: _constant.CONSTANT.LANG.EoFun.eoFile[_cache.PRODUCT_INFO.lang]
            };
            throw 'ignore';
        }
    };
    eo.jsonParse = function (response) {
        var eolinker = {
            obj: {},
            error: null
        };
        if (typeof response == 'string') {
            try {
                eolinker.obj = JSON.parse(response);
                return eolinker.obj;
            } catch (e) {
                if (e) {
                    if (navigator.userAgent.indexOf('Firefox') > -1) {
                        eolinker.error = e.toString();
                    } else {
                        eolinker.error = e.message;
                    }
                }
                reportList.status = 'codeError';
                reportList.errorReport = {
                    content: _constant.CONSTANT.LANG.EoFun.eoJsonParse[_cache.PRODUCT_INFO.lang] + eolinker.error
                };
                throw 'ignore';
            }
        } else {
            return response;
        }
    };
    eo.xmlParse = function (string, callback) {
        var eolinker = {
            obj: {},
            error: null
        };
        try {
            eolinker.obj = $.xml2json(string);
            return eolinker.obj;
        } catch (e) {
            reportList.status = 'codeError';
            reportList.errorReport = {
                content: _constant.CONSTANT.LANG.EoFun.eoXmlParse[_cache.PRODUCT_INFO.lang]
            };
            throw 'ignore';
        }
    };
    eo.MD5 = eo.Md5 = eo.md5 = function (sMessage) {
        try {
            var result = CryptoJS.MD5(sMessage.toString());
            result = CryptoJS.enc.Hex.stringify(result);
            return result;
        } catch (e) {
            reportList.status = 'codeError';
            reportList.errorReport = {
                content: _constant.CONSTANT.LANG.EoFun.eoMd5[_cache.PRODUCT_INFO.lang]
            };
            throw 'ignore';
        }
    };
    var num145847kda = [1, 224, 256, 384, 512];

    var _loop = function _loop(i) {
        eo['HmacSHA' + num145847kda[i]] = eo['hmacSHA' + num145847kda[i]] = eo['HmacSha' + num145847kda[i]] = function (sMessage, sKey) {
            try {
                var result = CryptoJS['HmacSHA' + num145847kda[i]](sMessage.toString(), sKey || '');
                result = CryptoJS.enc.Hex.stringify(result);
                return result;
            } catch (e) {
                console.log(e);
                reportList.status = 'codeError';
                reportList.errorReport = {
                    content: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.EoFun.eoHmacSHA[_cache.PRODUCT_INFO.lang], [num145847kda[i]])
                };
                throw 'ignore';
            }
        };
        eo['SHA' + num145847kda[i]] = eo['Sha' + num145847kda[i]] = eo['sha' + num145847kda[i]] = function (sMessage) {
            try {
                var result = CryptoJS['SHA' + num145847kda[i]](sMessage.toString());
                result = CryptoJS.enc.Hex.stringify(result);
                return result;
            } catch (e) {
                reportList.status = 'codeError';
                reportList.errorReport = {
                    content: _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.EoFun.eoSHA[_cache.PRODUCT_INFO.lang], [num145847kda[i]])
                };
                throw 'ignore';
            }
        };
    };

    for (var i = 0; i < num145847kda.length; i++) {
        _loop(i);
    }

    (0, _freeze2.default)(eo);

    function throwReplacer(match, offset) {
        var count = 1;
        var midCaseCode = caseCode.slice(0, offset);
        midCaseCode.replace(/\n/g, function (match, offset) {
            count++;
        });
        return match + count + ",";
    }
    if (caseCode) {
        caseCode = caseCode.replace(/eo\.info\(/g, throwReplacer);
        caseCode = caseCode.replace(/eo\.stop\(/g, throwReplacer);
        caseCode = caseCode.replace(/eo\.execute\(/g, function (match, offset) {
            return 'await ' + match;
        });
    }

    function afterCase() {
        if (caseInfo.afterCase.envCaseList != false) {
            caseInfo.afterCase.env = env;
            caseInfo.afterCase.isAfter = true;
            (0, _envCase.handleCaseCode)(caseInfo.afterCase).then(function (result) {
                reportList.afterCaseReportList = result.report;
                autoCode.postMessage(reportList);
            }).catch(function (e) {
                console.log('afterCode', e);
            });
        } else {
            autoCode.postMessage(reportList);
        }
    }
    var stringFunflsoj45ssv = function stringFunflsoj45ssv() {
        sendRequest().then(function (result) {
            codeTestTime.finishTime = new Date();
            codeTestTime.finishTime = codeTestTime.finishTime - codeTestTime.startTime;
            reportList.time = codeTestTime.finishTime + 'ms';
            reportList.responseList.forEach(function (eachApi) {
                if (eachApi.general.status == 'finish') {
                    reportList.successApi++;
                }
            });
            reportList.batchIndex = batchIndex;
            if (which == 'before') {
                resolve('beforeCase' + listIndex + ': END');
            } else if (which == 'after') {
                resolve('afterCase' + listIndex + ': END');
            } else {
                afterCase();
            }
        }).catch(function (e) {
            console.error('【async】', e);
            if (e != 'ignore') {
                content = '';
                if (navigator.userAgent.indexOf('Firefox') > -1) {
                    var content = e.toString();
                } else {
                    content = e.message;
                }
                reportList.status = 'codeError';
                if (e.toString().indexOf('传入信息有误') > -1 || e.toString().indexOf('has incorrect information') > -1) {
                    content = e + (_cache.PRODUCT_INFO.lang != 'en' ? '，请检查' : 'Please Check');
                };
                if (content.indexOf('Illegal invocation') > -1) {
                    content = _constant.CONSTANT.LANG.IllegalInvocation[_cache.PRODUCT_INFO.lang];
                }
                var reg = /eo\.userFunction\.(.+) is not a function/;
                if (reg.test(content)) {
                    content = _commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.CommonFun[_cache.PRODUCT_INFO.lang], [RegExp.$1]);
                }
                reportList.errorReport = {
                    content: content
                };
            };
            codeTestTime.finishTime = new Date();
            codeTestTime.finishTime = codeTestTime.finishTime - codeTestTime.startTime;
            reportList.time = codeTestTime.finishTime + 'ms';
            reportList.responseList.forEach(function (eachApi) {
                if (eachApi.general.status == 'finish') {
                    reportList.successApi++;
                }
            });
            reportList.batchIndex = batchIndex;
            if (which == 'before') {
                resolve('beforeCase' + listIndex + ' : ERROR');
            } else if (which == 'after') {
                resolve('afterCase' + listIndex + ' : ERROR');
            } else {
                afterCase();
            }
        });
    };
    caseCode = "async function sendRequest() {\n" + caseCode + "\n};\n(" + stringFunflsoj45ssv.toString() + ')();\n';
    try {
        codeTestTime.startTime = new Date();
        eval(caseCode);
    } catch (e) {
        if (e != 'ignore') {
            content = '';
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                var content = e.toString();
            } else {
                content = e.message;
            }
            reportList.status = 'codeError';
            if (content.indexOf('await is only valid in async function') > -1) {
                content = _constant.CONSTANT.LANG.EoFun.banExcute[_cache.PRODUCT_INFO.lang];
            }
            reportList.errorReport = {
                content: content
            };
        }
        codeTestTime.finishTime = new Date();
        codeTestTime.finishTime = codeTestTime.finishTime - codeTestTime.startTime;
        reportList.time = codeTestTime.finishTime + "ms";
        reportList.batchIndex = batchIndex;
        if (which == 'before') {
            resolve('beforeCase' + listIndex + ' : ERROR');
        } else if (which == 'after') {
            resolve('afterCase' + listIndex + ' : ERROR');
        } else {
            afterCase();
        }
    };
};
_trans.TRANS.autoCodeTest = function (caseInfo, autoCode) {
    var scar_Test = function () {
        var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var autoCodeData, env, reportList, paramList, i, headerList, additionalParamList, which;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            autoCodeData = {
                                preCode: {
                                    result: {
                                        report: []
                                    },
                                    stopStatus: true
                                }
                            };
                            env = {
                                baseUrl: '',
                                headers: {},
                                extraParams: {},
                                globalParams: {},
                                envAuth: {}
                            };
                            reportList = {
                                status: 'finish',
                                time: '0ms',
                                initReportList: [],
                                beforeCaseReportList: [],
                                responseList: [],
                                successApi: 0,
                                totalApi: 0
                            };

                            if (!(caseInfo.beforeCase.envCaseList.length != 0)) {
                                _context.next = 8;
                                break;
                            }

                            _context.next = 6;
                            return (0, _envCase.handleCaseCode)(caseInfo.beforeCase).then(function (result) {
                                autoCodeData.preCode.result = result;
                                reportList.beforeCaseReportList = autoCodeData.preCode.result.report;
                                env = result.env;
                            }).catch(function (e) {});

                        case 6:
                            _context.next = 9;
                            break;

                        case 8:
                            if (!$.isEmptyObject(caseInfo.env)) {
                                if (_cache.PRODUCT_INFO.productName == 'webCn' || _cache.PRODUCT_INFO.productName == 'webEn' || _cache.PRODUCT_INFO.productName == 'independent' && _cache.PRODUCT_INFO.version > '4.1') {
                                    env.baseUrl = env.baseUrl == '' ? caseInfo.env.frontURI : env.baseUrl;
                                } else {
                                    if (caseInfo.env.frontURIList[0]) {
                                        env.baseUrl = env.baseUrl == '' ? caseInfo.env.frontURIList[0].uri : env.baseUrl;
                                    }
                                }
                                paramList = {};

                                for (i = 0; i < caseInfo.env.paramList.length; i++) {
                                    paramList[caseInfo.env.paramList[i].paramKey] = caseInfo.env.paramList[i].paramValue;
                                }
                                headerList = {};

                                for (i = 0; i < caseInfo.env.headerList.length; i++) {
                                    headerList[caseInfo.env.headerList[i].headerName] = caseInfo.env.headerList[i].headerValue;
                                }
                                additionalParamList = {};

                                for (i = 0; i < caseInfo.env.additionalParamList.length; i++) {
                                    additionalParamList[caseInfo.env.additionalParamList[i].paramKey] = caseInfo.env.additionalParamList[i].paramValue;
                                }
                                env.headers = (0, _assign2.default)({}, headerList, env.headers);
                                env.extraParams = (0, _assign2.default)({}, additionalParamList, env.extraParams);
                                env.globalParams = (0, _assign2.default)({}, paramList, env.globalParams);
                                env.envAuth = (0, _assign2.default)({}, caseInfo.env.envAuth);
                            }

                        case 9:
                            if (!_trans.TRANS.stopStatus) {
                                which = 'auto';

                                EVAL_AUTOCODE(caseInfo, env, reportList, autoCode, which);
                            }

                        case 10:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        return function scar_Test() {
            return _ref5.apply(this, arguments);
        };
    }();

    scar_Test();
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(17);
__webpack_require__(109);
__webpack_require__(110);
__webpack_require__(69);
__webpack_require__(74);
__webpack_require__(54);

/***/ }),
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35);
__webpack_require__(37);
module.exports = __webpack_require__(89);


/***/ }),
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(5);
var get = __webpack_require__(63);
module.exports = __webpack_require__(0).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(91), __esModule: true };

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35);
__webpack_require__(37);
module.exports = __webpack_require__(92);


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(49);
var ITERATOR = __webpack_require__(2)('iterator');
var Iterators = __webpack_require__(20);
module.exports = __webpack_require__(0).isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
   
    || Iterators.hasOwnProperty(classof(O));
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(94);
module.exports = __webpack_require__(0).Object.entries;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {


var $export = __webpack_require__(4);
var $entries = __webpack_require__(64)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(96);
module.exports = __webpack_require__(0).Object.keys;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {


var toObject = __webpack_require__(48);
var $keys = __webpack_require__(19);

__webpack_require__(65)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(98), __esModule: true };

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(37);
__webpack_require__(35);
module.exports = __webpack_require__(50).f('iterator');


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(100), __esModule: true };

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(101);
__webpack_require__(68);
__webpack_require__(106);
__webpack_require__(107);
module.exports = __webpack_require__(0).Symbol;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(1);
var has = __webpack_require__(14);
var DESCRIPTORS = __webpack_require__(13);
var $export = __webpack_require__(4);
var redefine = __webpack_require__(60);
var META = __webpack_require__(66).KEY;
var $fails = __webpack_require__(18);
var shared = __webpack_require__(45);
var setToStringTag = __webpack_require__(36);
var uid = __webpack_require__(34);
var wks = __webpack_require__(2);
var wksExt = __webpack_require__(50);
var wksDefine = __webpack_require__(51);
var enumKeys = __webpack_require__(102);
var isArray = __webpack_require__(103);
var anObject = __webpack_require__(5);
var isObject = __webpack_require__(7);
var toIObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(41);
var createDesc = __webpack_require__(33);
var _create = __webpack_require__(61);
var gOPNExt = __webpack_require__(104);
var $GOPD = __webpack_require__(105);
var $DP = __webpack_require__(12);
var $keys = __webpack_require__(19);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(67).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(25).f = $propertyIsEnumerable;
  __webpack_require__(47).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(24)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
 
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
 
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
 
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
 
  create: $create,
 
  defineProperty: $defineProperty,
 
  defineProperties: $defineProperties,
 
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
 
  getOwnPropertyNames: $getOwnPropertyNames,
 
  getOwnPropertySymbols: $getOwnPropertySymbols
});

$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
 
 
 
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return;
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(11)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
setToStringTag($Symbol, 'Symbol');
setToStringTag(Math, 'Math', true);
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {


var getKeys = __webpack_require__(19);
var gOPS = __webpack_require__(47);
var pIE = __webpack_require__(25);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {


var cof = __webpack_require__(23);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {


var toIObject = __webpack_require__(15);
var gOPN = __webpack_require__(67).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(25);
var createDesc = __webpack_require__(33);
var toIObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(41);
var has = __webpack_require__(14);
var IE8_DOM_DEFINE = __webpack_require__(55);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(13) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(51)('asyncIterator');


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(51)('observable');


/***/ }),
/* 108 */,
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(3);

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = __webpack_require__(26);

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = __webpack_require__(21);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = __webpack_require__(22);

var _entries2 = _interopRequireDefault(_entries);

var _typeof2 = __webpack_require__(27);

var _typeof3 = _interopRequireDefault(_typeof2);

var _commonUtils = __webpack_require__(9);

var _requestUtils = __webpack_require__(28);

var _injectCode = __webpack_require__(52);

var _constant = __webpack_require__(6);

var _trans = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

"use strict";
var freeze = {
    ajax: null
};

_trans.TRANS.normalTest = function (content, normal) {
    var eoFreeze = {
        constant: {},
        request: {
            apiUrl: content.requestInfo.URL,
            scheme: '',
            requestHeaders: [],
            historyHeaders: [],
            historyParams: [],
            formData: null,
            params: {},
            beforeTime: {},
            apiRequestParamJsonType: content.requestInfo.apiRequestParamJsonType,
            flagFormDataToJson: false,
            processData: true,
            ContentType: 'application/x-www-form-urlencoded'
        },
        response: {
            whichXhr: 'success',
            responseHeaders: []
        },
        report: {
            params: {},
            requestType: content.requestInfo.requestType.toString(),
            headers: {}
        },
        data: {
            error: false,
            errorReason: '',
            httpHeader: content.requestInfo.httpHeader,
            requestType: content.requestInfo.requestType.toString(),
            method: content.requestInfo.apiRequestType || content.method.toString(),
            params: content.requestInfo.params,
            raw: content.requestInfo.raw,
            headers: content.requestInfo.headers,
            Url: content.requestInfo.URL,
            flagFile: false,
            env: content.env,
            auth: content.requestInfo.auth,
            beforeScript: content.script ? content.script.before : '',
            afterScript: content.script ? content.script.after : '',
            flagQuickTest: content.quickTest || 0,
            rawJsonData: '',
            eo: {},
            requestRedirect: content.advancedSetting && content.advancedSetting.requestRedirect == 0 ? false : true
        }
    };
    var AllRequestInfo = {
        apiLocation: {},
        redirectObj: {}
    };
    var env = {
        baseUrl: '',
        headers: {},
        extraParams: {},
        globalParams: {}
    };
    var url = '',
        params = {},
        headers = {},
        query = {},
        raw = '';
    var backData = {};
    var response = null;
    if ('formDataToJson' in content) {
        eoFreeze.request.flagFormDataToJson = content.formDataToJson.checkbox;
    }

    function handleArguments() {
        switch (eoFreeze.data.requestType.toString()) {
            case '0':
                {
                    if (eoFreeze.data.method == 'GET') {
                        eoFreeze.data.params = [];
                    }
                    for (var i = 0; i < eoFreeze.data.params.length;) {
                        if (!eoFreeze.data.params[i].paramKey || !eoFreeze.data.params[i].checkbox) {
                            eoFreeze.data.params.splice(i, 1);
                        } else {
                            if (eoFreeze.data.params[i].paramType == '1') {
                                eoFreeze.data.flagFile = true;
                            }
                            i++;
                        }
                    }
                    if (!eoFreeze.request.flagFormDataToJson) {
                        for (var i = 0; i < eoFreeze.data.params.length; i++) {

                            if (eoFreeze.data.flagFile == true) {
                                if (eoFreeze.data.params[i].paramType == '1') {
                                    eoFreeze.data.params[i].files = eoFreeze.data.params[i].files || [];
                                    var paramInfo = '';

                                    if (eoFreeze.data.params[i].paramInfo) {
                                        paramInfo = eoFreeze.data.params[i].paramInfo.split(",");
                                        for (var j = 0; eoFreeze.data.params[i].files && j < eoFreeze.data.params[i].files.length; j++) {
                                            var file = _requestUtils.HANDLE_PARAMS.changeDataURLtoBlob(eoFreeze.data.params[i].files[j]);
                                            file.name = paramInfo[j];
                                            if (eoFreeze.data.params[i].paramKey in params) {
                                                if (Object.prototype.toString.call(params[eoFreeze.data.params[i].paramKey]) == '[object Array]') {
                                                    params[eoFreeze.data.params[i].paramKey].push(file);
                                                } else {
                                                    params[eoFreeze.data.params[i].paramKey] = [file, params[eoFreeze.data.params[i].paramKey]];
                                                }
                                            } else {
                                                params[eoFreeze.data.params[i].paramKey] = file;
                                            }
                                        }
                                    } else {
                                        params[eoFreeze.data.params[i].paramKey] = "";
                                    }
                                } else {
                                    if (eoFreeze.data.params[i].paramKey in params) {
                                        if (Object.prototype.toString.call(params[eoFreeze.data.params[i].paramKey]) == '[object Array]') {
                                            params[eoFreeze.data.params[i].paramKey].push(eoFreeze.data.params[i].paramInfo || '');
                                        } else {
                                            params[eoFreeze.data.params[i].paramKey] = [params[eoFreeze.data.params[i].paramKey], eoFreeze.data.params[i].paramInfo || ''];
                                        }
                                    } else {
                                        params[eoFreeze.data.params[i].paramKey] = eoFreeze.data.params[i].paramInfo || '';
                                    }
                                }
                            } else {
                                if (eoFreeze.data.params[i].paramKey in params) {

                                    if ((0, _typeof3.default)(params[eoFreeze.data.params[i].paramKey]) == 'object') {
                                        params[eoFreeze.data.params[i].paramKey].push(eoFreeze.data.params[i].paramInfo || '');
                                    } else {

                                        params[eoFreeze.data.params[i].paramKey] = [params[eoFreeze.data.params[i].paramKey], eoFreeze.data.params[i].paramInfo || ''];
                                    }
                                } else {
                                    params[eoFreeze.data.params[i].paramKey] = eoFreeze.data.params[i].paramInfo || '';
                                }
                            }
                        }
                    } else {

                        var formJsonData = _requestUtils.HANDLE_PARAMS.handleFormJson(eoFreeze.data.params);
                        if (formJsonData.error.status == 1) {
                            eoFreeze.data.error = true;
                            eoFreeze.report.errorReason = formJsonData.error;
                        }
                        if (eoFreeze.data.beforeScript) {
                            params = JSON.parse(formJsonData.dataParams);
                        } else {
                            params = formJsonData.dataParams;
                        }
                    }
                    break;
                }
            case '1':
                {
                    if (eoFreeze.data.method == 'GET') {
                        eoFreeze.data.raw = '';
                    }
                    raw = eoFreeze.data.raw;
                    break;
                }
            case '2':
                {
                    if (eoFreeze.data.method == 'GET') {
                        eoFreeze.data.params = [];
                    }

                    var options = {
                        rootType: eoFreeze.request.apiRequestParamJsonType || "0"
                    };
                    params = _requestUtils.HANDLE_PARAMS.handleJSON(eoFreeze.data.params, options);
                    break;
                }
            case '3':
                {
                    if (eoFreeze.data.method == 'GET') {
                        eoFreeze.data.params = [];
                    }
                    params = _requestUtils.HANDLE_PARAMS.handleJSON(eoFreeze.data.params, {
                        rootType: "0"
                    });
                    break;
                }
        }
        if (eoFreeze.data.auth) {
            switch (Number(eoFreeze.data.auth.status)) {
                case 1:
                    {
                        if (eoFreeze.data.auth.basicAuth) {
                            var str = eoFreeze.data.auth.basicAuth.username + ':' + eoFreeze.data.auth.basicAuth.password;
                            headers['Authorization'] = 'Basic ' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str));
                        }
                        break;
                    }
                case 2:
                    {
                        var compareTable = {
                            'query': query,
                            'header': headers
                        };
                        var result = _requestUtils.REQUEST_COMMON.jwtEncode(eoFreeze.data.auth.jwtAuth);
                        if (result.type == 'error') {
                            _commonUtils.COMMON_TOOLS.postError({
                                type: 'normal',
                                connect: normal,
                                errorReason: result.errorReason,
                                data: eoFreeze.data
                            });
                        } else {
                            compareTable[eoFreeze.data.auth.jwtAuth.position][eoFreeze.data.auth.jwtAuth.tokenName] = result;
                        }
                    }
            }
        }

        for (var i = 0; i < eoFreeze.data.headers.length;) {
            if (!eoFreeze.data.headers[i].headerName || !eoFreeze.data.headers[i].checkbox) {
                eoFreeze.data.headers.splice(i, 1);
            } else {
                headers[eoFreeze.data.headers[i].headerName] = eoFreeze.data.headers[i].headerValue;
                i++;
            }
        }

        if (eoFreeze.data.env && eoFreeze.data.env.length != 0) {
            eoFreeze.data.env.forEach(function (globalVal, key) {
                env.globalParams[globalVal.paramKey] = globalVal.paramValue;
            });
        }
    }

    eoFreeze.data.method = _commonUtils.COMMON_TOOLS.judgeRequestMethod(eoFreeze.data.method);

    url = eoFreeze.request.apiUrl;

    query = _requestUtils.HANDLE_URL.splitQuery(url);
    handleArguments();
    if (eoFreeze.data.beforeScript || eoFreeze.data.afterScript) {
        eoFreeze.data.eo = _injectCode.INJECT_CODE.defineEo(env);
    }

    if (eoFreeze.data.beforeScript) {
        var preScriptResult = _injectCode.INJECT_CODE.evalBeforeScript(eoFreeze.data.beforeScript, url, query, headers, params, raw, env, eoFreeze.data.eo);

        if (preScriptResult.error) {
            _commonUtils.COMMON_TOOLS.postError({
                type: 'normal',
                connect: normal,
                errorReason: preScriptResult.errorReason,
                data: eoFreeze.data
            });
        } else {
            url = preScriptResult.url;
            query = preScriptResult.query;
            headers = preScriptResult.headers;
            params = preScriptResult.params;
            raw = preScriptResult.raw;
            env = preScriptResult.env;
        }
    }
    url = _requestUtils.HANDLE_URL.jointQuery(url, query);

    eoFreeze.data.flagFile = _requestUtils.HANDLE_PARAMS.judgeFileExist(params);
    var midEnvReulst = _requestUtils.REQUEST_COMMON.handleEnv(env, url, headers, params, raw, eoFreeze.data.requestType, eoFreeze.request.flagFormDataToJson);
    url = midEnvReulst.url;
    headers = midEnvReulst.headers;
    params = midEnvReulst.params;
    raw = midEnvReulst.raw;
    var midRequestParams = _requestUtils.HANDLE_PARAMS.handleRequestParams(headers, eoFreeze.data.requestType, eoFreeze.request.flagFormDataToJson, eoFreeze.data.flagFile, params, raw, eoFreeze.request.ContentType, eoFreeze.request.processData, eoFreeze.report.requestType);
    if (eoFreeze.data.method == 'GET') {
        eoFreeze.report.params = null;
        eoFreeze.request.params = null;
    } else {
        eoFreeze.report.params = midRequestParams.report;
        eoFreeze.request.params = midRequestParams.request;
    }
    headers = midRequestParams.headers;
    eoFreeze.request.processData = midRequestParams.processData;
    eoFreeze.request.ContentType = midRequestParams.ContentType;
    eoFreeze.report.requestType = midRequestParams.reportType;
    if (midRequestParams.reportType.toString() == '1') {
        eoFreeze.request.historyParams = midRequestParams.report;
    } else {
        for (var key in midRequestParams.report) {
            eoFreeze.request.historyParams.push({
                key: key,
                value: midRequestParams.report[key]
            });
        }
    }
    url = _requestUtils.HANDLE_URL.handleProtocol(url, eoFreeze.data.httpHeader);

    var headerResult = _requestUtils.HANDLE_HEADER.isLegal(headers);
    if (headerResult.error == true) {
        _commonUtils.COMMON_TOOLS.postError({
            type: 'normal',
            connect: normal,
            errorReason: headerResult.errorReason,
            data: eoFreeze.data
        });
    }

    function handleRequestHeaders(details) {
        var reqeustUrl;

        if (!details.initiator) {
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
            } else {
                for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                    if (details.requestHeaders[j].name.toLowerCase() == 'origin') {
                        details.initiator = details.requestHeaders[j].value;
                        break;
                    }
                }
            }
        }
        if (details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) {
            eoFreeze.request.requestHeaders = [];
            eoFreeze.request.historyHeaders = [];
            details.requestHeaders.push({
                name: 'Cache-Control',
                value: 'no-cache'
            });
            var entries = _entries2.default;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(entries(headers)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                    var _key = _ref2[0];
                    var value = _ref2[1];

                    value = (value || '').toString();
                    var headerFlag = 0;
                    for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                        if (details.requestHeaders[j].name.toLowerCase() == _key.toLowerCase()) {
                            headerFlag = 1;
                            if (_key.toLowerCase() == 'cookie') {
                                _commonUtils.COMMON_TOOLS.setCookieObj({
                                    url: details.url,
                                    cookies: value
                                });
                                value = _commonUtils.COMMON_TOOLS.replaceCookieStr(details.requestHeaders[j].value, value);
                            }
                            details.requestHeaders[j].name = _key;
                            details.requestHeaders[j].value = value;
                            eoFreeze.request.historyHeaders.push({
                                name: _key,
                                value: value
                            });
                            break;
                        }
                    }
                    if (headerFlag == 0) {
                        if (_key.toLowerCase() == 'cookie') {
                            _commonUtils.COMMON_TOOLS.setCookieObj({
                                url: details.url,
                                cookies: value
                            });
                        }
                        details.requestHeaders.push({
                            name: _key,
                            value: value
                        });
                        eoFreeze.request.historyHeaders.push({
                            name: _key,
                            value: value
                        });
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var midReqeustHeader = details.requestHeaders.slice(0);
            midReqeustHeader.forEach(function (requestHeader) {
                if (requestHeader.name.toLowerCase() != 'cookie') {
                    eoFreeze.request.requestHeaders.push({
                        key: requestHeader.name,
                        value: requestHeader.value
                    });
                }
            });
            chrome.cookies.getAll({
                url: details.url
            }, function (cookies) {
                eoFreeze.request.requestHeaders.push({
                    key: 'cookie',
                    value: _commonUtils.COMMON_TOOLS.jointCookieObj({
                        cookies: cookies,
                        type: 'array'
                    })
                });
            });
            eoFreeze.request.requestHeaders = eoFreeze.request.requestHeaders.sort(_commonUtils.COMMON_TOOLS.sortArray);
            AllRequestInfo[details.requestId] = AllRequestInfo[details.requestId] || [];
            AllRequestInfo[details.requestId].push({
                url: details.url,
                requestHeaders: eoFreeze.request.requestHeaders,
                historyRequestHeaders: eoFreeze.request.historyHeaders,
                statusCode: 0
            });
            AllRequestInfo.apiLocation[(0, _keys2.default)(AllRequestInfo).length - 2] = details.requestId;
        }
        return {
            requestHeaders: details.requestHeaders
        };
    }

    function getResponseHeaders(details) {
        if (!details.initiator) {
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
            } else {
                if (details.requestHeaders) {
                    for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                        if (details.requestHeaders[j].name.toLowerCase() == 'origin') {
                            details.initiator = details.requestHeaders[j].value;
                            break;
                        }
                    }
                }
            }
        }
        if (details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) {
            var midResponseHeader = {};
            eoFreeze.response.responseHeaders = [];
            if (/^3\d+/.test(details.statusCode)) {
                AllRequestInfo.redirectObj[details.requestId] = true;
            }
            details.responseHeaders.forEach(function (header) {
                header.name = header.name.toLowerCase();
                if (header.name in midResponseHeader) {
                    midResponseHeader[header.name] = midResponseHeader[header.name] + ";" + header.value;
                } else {
                    midResponseHeader[header.name] = header.value;
                }
            });
            for (var i in midResponseHeader) {
                eoFreeze.response.responseHeaders.push({
                    key: i,
                    value: midResponseHeader[i]
                });
            }
            eoFreeze.response.responseHeaders = eoFreeze.response.responseHeaders.sort(_commonUtils.COMMON_TOOLS.sortArray);
            var requestIndex = AllRequestInfo[details.requestId].length - 1;
            AllRequestInfo[details.requestId][requestIndex].responseHeaders = eoFreeze.response.responseHeaders;
            AllRequestInfo[details.requestId][requestIndex].statusCode = details.statusCode;
            AllRequestInfo[details.requestId][requestIndex].testTime = new Date();
        }
    }
    if (eoFreeze.data.error == true) {
        return;
    }
    chrome.webRequest.onBeforeSendHeaders.addListener(handleRequestHeaders, {
        urls: ["http://*/*", "https://*/*"],
        types: ["xmlhttprequest"]
    }, ["blocking", "requestHeaders"]);

    window.parent.chrome.webRequest.onHeadersReceived.addListener(getResponseHeaders, {
        urls: ["<all_urls>"]
    }, ["responseHeaders", "blocking"]);
    if (eoFreeze.data.method == 'GET') {
        eoFreeze.request.ContentType = false;
    }
    var Ajax = $.ajax({
        url: url,
        traditional: true,
        beforeSend: function beforeSend(request) {
            eoFreeze.request.beforeTime = new Date();
        },
        processData: eoFreeze.request.processData,
        contentType: eoFreeze.request.ContentType,
        type: eoFreeze.data.method,
        async: true,
        data: eoFreeze.request.params
    }).done(function (successData, textStatus, xhr) {
        eoFreeze.response.whichXhr = 'success';
    }).fail(function (xhr, textStatus) {
        eoFreeze.response.whichXhr = 'error';
        if (xhr.status == 0) {
            if (!(eoFreeze.data.requestRedirect == false && AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[1]])) {
                _commonUtils.COMMON_TOOLS.postError({
                    type: 'normal',
                    connect: normal,
                    errorReason: "target server no answer",
                    data: eoFreeze.data
                });
            }
        }
    }).always(function (successData, textStatus, jqXHR) {
        backData = {};

        chrome.webRequest.onBeforeSendHeaders.removeListener(handleRequestHeaders);
        chrome.webRequest.onHeadersReceived.removeListener(getResponseHeaders);
        if (eoFreeze.data.error) return;

        var xhr;
        if (eoFreeze.response.whichXhr == 'success') {
            xhr = jqXHR;
        } else {
            xhr = successData;
        }

        var testDeny = new Date(),
            testDeny = testDeny - eoFreeze.request.beforeTime;

        var responseContentType = xhr.getResponseHeader('Content-Type');
        if (responseContentType) {
            if (responseContentType.indexOf("image/") != -1) {
                xhr.responseText = eoFreeze.request.apiUrl;
            }
        }
        response = xhr.responseText;
        if (eoFreeze.data.afterScript && !(eoFreeze.data.requestRedirect == false && AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[1]])) {
            var afterResult = _injectCode.INJECT_CODE.evalAfterScript(eoFreeze.data.afterScript, response, env, eoFreeze.data.eo);
            if (afterResult.error) {
                _commonUtils.COMMON_TOOLS.postError({
                    type: 'normal',
                    connect: normal,
                    errorReason: afterResult.errorReason,
                    data: eoFreeze.data
                });
                return;
            } else {
                response = afterResult.response;
                env = afterResult.env;
            }
        }

        try {
            if (typeof response != 'string') {
                response = (0, _stringify2.default)(response);
                if ((0, _stringify2.default)(JSON.parse(xhr.responseText)) == response) {
                    response = xhr.responseText;
                }
            }
        } catch (e) {}
        var statusCode = xhr.status;
        if (!eoFreeze.data.requestRedirect) {
            var detailsInfo = AllRequestInfo[AllRequestInfo.apiLocation[1]];
            var requestInfo = detailsInfo[0];
            if (AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[1]]) {
                statusCode = requestInfo.statusCode;
                url = requestInfo.url;
                eoFreeze.request.requestHeaders = requestInfo.requestHeaders;
                eoFreeze.response.responseHeaders = requestInfo.responseHeaders;
                eoFreeze.request.historyHeaders = requestInfo.historyRequestHeaders;
                response = '';
                testDeny = requestInfo.testTime - eoFreeze.request.beforeTime;
            }
        }
        backData = {
            statusCode: "000000",
            testHttpCode: statusCode,
            requestBody: {
                url: url,
                params: {
                    requestType: eoFreeze.report.requestType,
                    body: eoFreeze.report.params
                },
                query: query,
                headers: (0, _stringify2.default)(eoFreeze.request.requestHeaders) == '{}' ? null : eoFreeze.request.requestHeaders,
                historyHeaders: eoFreeze.request.historyHeaders,
                historyParams: eoFreeze.request.historyParams
            },
            testResult: {
                headers: (0, _stringify2.default)(eoFreeze.response.responseHeaders) == '{}' ? null : eoFreeze.response.responseHeaders,
                body: response,
                response: xhr.responseText
            },
            testDeny: testDeny
        };
        backData = (0, _stringify2.default)(backData);
        normal.postMessage({
            backResult: backData
        });
    });
    _trans.TRANS.ajaxs.push(Ajax);
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(3);

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = __webpack_require__(10);

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = __webpack_require__(27);

var _typeof3 = _interopRequireDefault(_typeof2);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = __webpack_require__(21);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = __webpack_require__(22);

var _entries2 = _interopRequireDefault(_entries);

var _commonUtils = __webpack_require__(9);

var _requestUtils = __webpack_require__(28);

var _cache = __webpack_require__(8);

var _injectCode = __webpack_require__(52);

var _constant = __webpack_require__(6);

var _trans = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

"use strict";

_trans.TRANS.batchTest = function (webInfo, batch) {
    var eoData = {
        requestId: -1,
        array: [],
        nowApiCount: 0
    };
    var test = webInfo.disconnect;
    var allRequestHeaders = [];
    var allResponseHeaders = [];
    var errorRequestFlagArr = [];
    var AllRequestInfo = {
        apiLocation: {},
        redirectObj: {}
    };
    _trans.TRANS.fun.handleRequestHeaders = function (details) {
        if (!eoData.array[0]) return;
        if (eoData.requestId == -1) {
            eoData.requestId = Number(details.requestId) + 1;
        }

        if (typeof errorRequestFlagArr[details.requestId - eoData.requestId] == 'number') {
            eoData.requestId = eoData.requestId - errorRequestFlagArr[details.requestId - eoData.requestId];
        }
        var template = eoData.array[details.requestId - eoData.requestId];

        if (template && template.apiUrl) {
            if (!details.initiator) {
                if (navigator.userAgent.indexOf('Firefox') > -1) {
                    details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
                } else {
                    for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                        if (details.requestHeaders[j].name.toLowerCase() == 'origin') {
                            details.initiator = details.requestHeaders[j].value;
                            break;
                        }
                    }
                }
            }
            if (details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) {
                var key = Object.key,
                    value = Object.value,
                    entries = _entries2.default;

                details.requestHeaders.push({
                    name: 'Cache-Control',
                    value: 'no-cache'
                });
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = (0, _getIterator3.default)(entries(template.headers)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref = _step.value;

                        var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                        var _key = _ref2[0];
                        var _value = _ref2[1];

                        var headerFlag = 0;
                        _value = (_value || '').toString();
                        for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                            if (details.requestHeaders[j].name.toLowerCase() == _key.toLowerCase()) {
                                headerFlag = 1;
                                if (_key.toLowerCase() == 'cookie') {
                                    _commonUtils.COMMON_TOOLS.setCookieObj({
                                        url: details.url,
                                        cookies: _value
                                    });
                                    _value = _commonUtils.COMMON_TOOLS.replaceCookieStr(details.requestHeaders[j].value, _value);
                                }
                                details.requestHeaders[j].name = _key;
                                details.requestHeaders[j].value = _value;
                            }
                        }
                        if (headerFlag == 0 && _key) {
                            if (_key.toLowerCase() == 'cookie') {
                                _commonUtils.COMMON_TOOLS.setCookieObj({
                                    url: details.url,
                                    cookies: _value
                                });
                            }
                            details.requestHeaders.push({
                                name: _key,
                                value: _value
                            });
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                var requestHeaders = {};

                for (var j = 0; j < details.requestHeaders.length; j++) {
                    requestHeaders[details.requestHeaders[j].name] = details.requestHeaders[j].value;
                }
                chrome.cookies.getAll({
                    url: details.url
                }, function (cookies) {
                    requestHeaders['cookie'] = _commonUtils.COMMON_TOOLS.jointCookieObj({
                        cookies: cookies,
                        type: 'array'
                    });
                });
                AllRequestInfo[details.requestId] = AllRequestInfo[details.requestId] || [];
                AllRequestInfo[details.requestId].push({
                    url: details.url,
                    requestHeaders: requestHeaders,
                    statusCode: 0,
                    index: details.requestId - eoData.requestId
                });
                AllRequestInfo.apiLocation[details.requestId - eoData.requestId] = details.requestId;
                allRequestHeaders[details.requestId - eoData.requestId] = requestHeaders;
            }
        }
        return {
            requestHeaders: details.requestHeaders
        };
    };

    _trans.TRANS.fun.getResponseHeaders = function (details) {
        if (!details.initiator) {
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                details.initiator = details.originUrl.replace('/_generated_background_page.html', '');
            } else {
                if (details.requestHeaders) {
                    for (var j = details.requestHeaders.length - 1; j >= 0; j--) {
                        if (details.requestHeaders[j].name.toLowerCase() == 'origin') {
                            details.initiator = details.requestHeaders[j].value;
                            break;
                        }
                    }
                }
            }
        }
        if (details.initiator == _constant.CONSTANT.INITTIATOR || details.tabId == -1) {
            var midResponseHeader = {};
            if (/^3\d+/.test(details.statusCode)) {
                AllRequestInfo.redirectObj[details.requestId] = true;
            }
            details.responseHeaders.forEach(function (header) {
                header.name = header.name.toLowerCase();
                if (header.name in midResponseHeader) {
                    midResponseHeader[header.name] = midResponseHeader[header.name] + ";" + header.value;
                } else {
                    midResponseHeader[header.name] = header.value;
                }
            });
            if (AllRequestInfo[details.requestId]) {
                allResponseHeaders[AllRequestInfo[details.requestId][0].index] = midResponseHeader;
            }
            AllRequestInfo[details.requestId] = AllRequestInfo[details.requestId] || [];
            var requestIndex = AllRequestInfo[details.requestId].length - 1;
            if (requestIndex >= 0) {
                AllRequestInfo[details.requestId][requestIndex].responseHeaders = midResponseHeader;
                AllRequestInfo[details.requestId][requestIndex].statusCode = details.statusCode;
                AllRequestInfo[details.requestId][requestIndex].testTime = new Date();
            }
        }
    };
    window.parent.chrome.webRequest.onBeforeSendHeaders.addListener(_trans.TRANS.fun.handleRequestHeaders, {
        urls: ["http://*/*", "https://*/*"],
        types: ["xmlhttprequest"]
    }, ["blocking", "requestHeaders"]);
    window.parent.chrome.webRequest.onHeadersReceived.addListener(_trans.TRANS.fun.getResponseHeaders, {
        urls: ["<all_urls>"]
    }, ["responseHeaders", "blocking"]);
    $.ajax({
        url: 'https://www.eolinker.com',
        type: 'GET',
        async: true
    });
    var caseLen = webInfo.caseList.length;
    var backResult = {
        responseList: [{
            responseType: "error"
        }],
        status: "tested"
    };

    backResult.responseList = new Array(caseLen);

    var _loop = function _loop() {
        data = webInfo.caseList[k].caseData;

        try {
            data = JSON.parse(data);
        } catch (e) {}
        eoFreeze = {
            constant: {},
            request: {
                apiUrl: data.URL,
                responseHeaders: [],
                params: {},
                beforeTime: new Date(),
                apiRequestParamJsonType: data.apiRequestParamJsonType || "0",
                flagFormDataToJson: !data.toJson || _cache.PRODUCT_INFO.productName == 'webCn' ? false : true,
                processData: true,
                ContentType: 'application/x-www-form-urlencoded'
            },
            response: {
                error: {},
                whichXhr: 'success'
            },
            report: {
                params: {},
                requestType: data.requestType,
                errorReason: [],
                headers: {}
            },
            data: {
                httpHeader: data.httpHeader,
                requestType: data.requestType,
                method: data.apiRequestType,
                params: data.params,
                restfulParams: data.restfulParam || [],
                raw: data.raw,
                headers: data.headers,
                error: false,
                Url: data.URL,
                env: webInfo.env,
                auth: data.auth,
                beforeScript: data.script ? data.script.before : '',
                afterScript: data.script ? data.script.after : ''
            }
        };
        env = {
            baseUrl: '',
            headers: {},
            extraParams: {},
            globalParams: {}
        };
        url = '';
        params = {};
        headers = {};
        query = {};
        raw = '';
        rest = {};
        response = null;


        eoFreeze.data.method = _commonUtils.COMMON_TOOLS.judgeRequestMethod(eoFreeze.data.method);

        function handleErrorReason(errorReason, container) {
            if (_cache.PRODUCT_INFO.productName == 'independent' && _cache.PRODUCT_INFO.version >= '4.1.7') {
                container = errorReason;
            } else {
                if ((typeof errorReason === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorReason)) == 'object') {
                    container = (0, _assign2.default)(container.concat(errorReason));
                } else {
                    container.push(errorReason);
                }
            }
            return container;
        }

        function handleArguments() {
            for (var i = 0; i < eoFreeze.data.restfulParams.length;) {
                if (!eoFreeze.data.restfulParams[i].paramKey || !eoFreeze.data.restfulParams[i].checkbox) {
                    eoFreeze.data.restfulParams.splice(i, 1);
                } else {
                    var midUrl = url;
                    var beforeUrl = url;
                    midUrl = midUrl.replace(eval("/\{(?!\{)" + eoFreeze.data.restfulParams[i].paramKey + "\}(?!\})/g"), eoFreeze.data.restfulParams[i].paramInfo);
                    midUrl = midUrl.replace(eval("/\:" + eoFreeze.data.restfulParams[i].paramKey + "/g"), eoFreeze.data.restfulParams[i].paramInfo);
                    if (beforeUrl != midUrl) {
                        rest[eoFreeze.data.restfulParams[i].paramKey] = eoFreeze.data.restfulParams[i].paramInfo;
                    }
                    i++;
                }
            }
            switch (eoFreeze.data.requestType) {
                case '0':
                    {

                        if (eoFreeze.data.method == 'GET') {
                            eoFreeze.data.params = [];
                        }
                        for (var i = 0; i < eoFreeze.data.params.length;) {
                            if (!eoFreeze.data.params[i].paramKey || !eoFreeze.data.params[i].checkbox) {
                                eoFreeze.data.params.splice(i, 1);
                            } else {
                                eoFreeze.data.params[i].paramInfo = eoFreeze.data.params[i].paramInfo || '';
                                i++;
                            }
                        }
                        if (!eoFreeze.request.flagFormDataToJson) {
                            for (var i = 0; i < eoFreeze.data.params.length; i++) {
                                if (eoFreeze.data.params[i].paramKey in params) {
                                    if ((0, _typeof3.default)(params[eoFreeze.data.params[i].paramKey]) == 'object') {
                                        params[eoFreeze.data.params[i].paramKey].push(eoFreeze.data.params[i].paramInfo || '');
                                    } else {
                                        params[eoFreeze.data.params[i].paramKey] = [params[eoFreeze.data.params[i].paramKey], eoFreeze.data.params[i].paramInfo || ''];
                                    }
                                } else {
                                    params[eoFreeze.data.params[i].paramKey] = eoFreeze.data.params[i].paramInfo || '';
                                }
                            }
                        } else {

                            var formJsonData = _requestUtils.HANDLE_PARAMS.handleFormJson(eoFreeze.data.params);
                            if (formJsonData.error.status == 1) {
                                eoFreeze.data.error = true;
                                eoFreeze.report.errorReason = handleErrorReason(formJsonData.error, eoFreeze.report.errorReason);
                            }
                            if (eoFreeze.data.beforeScript) {
                                params = JSON.parse(formJsonData.dataParams);
                            } else {
                                params = formJsonData.dataParams;
                            }
                        }
                        break;
                    }
                case '1':
                    {
                        if (eoFreeze.data.method == 'GET') {
                            eoFreeze.data.raw = '';
                        }
                        raw = eoFreeze.data.raw;
                        break;
                    }
                case '2':
                    {
                        if (eoFreeze.data.method == 'GET') {
                            eoFreeze.data.params = [];
                        }

                        var options = {
                            rootType: eoFreeze.request.apiRequestParamJsonType || "0"
                        };
                        params = _requestUtils.HANDLE_PARAMS.handleJSON(eoFreeze.data.params, options);
                        break;
                    }
                case '3':
                    {
                        if (eoFreeze.data.method == 'GET') {
                            eoFreeze.data.params = [];
                        }
                        params = _requestUtils.HANDLE_PARAMS.handleJSON(eoFreeze.data.params, {
                            rootType: "0"
                        });
                        break;
                    }

            }

            if (eoFreeze.data.auth) {
                switch (Number(eoFreeze.data.auth.status)) {
                    case 1:
                        {
                            if (eoFreeze.data.auth.basicAuth) {
                                var str = eoFreeze.data.auth.basicAuth.username + ':' + eoFreeze.data.auth.basicAuth.password;
                                headers['Authorization'] = 'Basic ' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str));
                            }
                            break;
                        }
                    case 2:
                        {
                            var compareTable = {
                                'query': query,
                                'header': headers
                            };
                            var result = _requestUtils.REQUEST_COMMON.jwtEncode(eoFreeze.data.auth.jwtAuth);
                            if (result.type == 'error') {
                                eoFreeze.data.error = true;
                                eoFreeze.report.errorReason = handleErrorReason(result.errorReason, eoFreeze.report.errorReason);
                            } else {
                                compareTable[eoFreeze.data.auth.jwtAuth.position][eoFreeze.data.auth.jwtAuth.tokenName] = result;
                            }
                        }
                }
            }

            for (var i = 0; i < eoFreeze.data.headers.length;) {
                if (!eoFreeze.data.headers[i].headerName || !eoFreeze.data.headers[i].checkbox) {
                    eoFreeze.data.headers.splice(i, 1);
                } else {
                    headers[eoFreeze.data.headers[i].headerName] = eoFreeze.data.headers[i].headerValue;
                    i++;
                }
            }

            if (!$.isEmptyObject(eoFreeze.data.env)) {
                if (_cache.PRODUCT_INFO.productName == 'webCn' || _cache.PRODUCT_INFO.productName == 'webEn' || _cache.PRODUCT_INFO.productName == 'independent' && _cache.PRODUCT_INFO.version > '4.1') {
                    env.baseUrl = env.baseUrl == '' ? eoFreeze.data.env.frontURI : env.baseUrl;
                } else {
                    if (eoFreeze.data.env.frontURIList[0]) {
                        env.baseUrl = env.baseUrl == '' ? eoFreeze.data.env.frontURIList[0].uri : env.baseUrl;
                    }
                }
                var paramList = {};
                for (var i = 0; i < eoFreeze.data.env.paramList.length; i++) {
                    paramList[eoFreeze.data.env.paramList[i].paramKey] = eoFreeze.data.env.paramList[i].paramValue;
                }
                var headerList = {};
                for (var i = 0; i < eoFreeze.data.env.headerList.length; i++) {
                    headerList[eoFreeze.data.env.headerList[i].headerName] = eoFreeze.data.env.headerList[i].headerValue;
                }
                var additionalParamList = {};
                for (var i = 0; i < eoFreeze.data.env.additionalParamList.length; i++) {
                    additionalParamList[eoFreeze.data.env.additionalParamList[i].paramKey] = eoFreeze.data.env.additionalParamList[i].paramValue;
                }
                env.headers = headerList;
                env.extraParams = additionalParamList;
                env.globalParams = paramList;
                if (!(eoFreeze.data.auth && eoFreeze.data.auth.status != '0')) {
                    env.envAuth = eoFreeze.data.env.envAuth;
                }
            }
        }

        url = eoFreeze.request.apiUrl;
        query = _requestUtils.HANDLE_URL.splitQuery(url);
        handleArguments();
        if (eoFreeze.data.beforeScript || eoFreeze.data.afterScript) {
            eoFreeze.data.eo = _injectCode.INJECT_CODE.defineEo(env);
        }

        beforeResult = _injectCode.INJECT_CODE.evalBeforeScript(eoFreeze.data.beforeScript, url, query, headers, params, raw, env, eoFreeze.data.eo);

        if (beforeResult.error) {
            eoFreeze.data.error = true;
            handleErrorReason(beforeResult.errorReason, eoFreeze.report.errorReason);
        } else {
            url = beforeResult.url;
            query = beforeResult.query;
            headers = beforeResult.headers;
            params = beforeResult.params;
            raw = beforeResult.raw;
            env = beforeResult.env;
        }
        url = _requestUtils.HANDLE_URL.replaceRest(url, rest);

        eoFreeze.data.flagFile = _requestUtils.HANDLE_PARAMS.judgeFileExist(params);

        url = _requestUtils.HANDLE_URL.jointQuery(url, query);
        var midEnvReulst = _requestUtils.REQUEST_COMMON.handleEnv(env, url, headers, params, raw, eoFreeze.data.requestType, eoFreeze.request.flagFormDataToJson);
        if (midEnvReulst.type == 'error') {
            eoFreeze.data.error = true;
            eoFreeze.report.errorReason = handleErrorReason(midEnvReulst.errorReason, eoFreeze.report.errorReason);
        }
        url = midEnvReulst.url;
        headers = midEnvReulst.headers;
        params = midEnvReulst.params;
        raw = midEnvReulst.raw;
        var midRequestParams = _requestUtils.HANDLE_PARAMS.handleRequestParams(headers, eoFreeze.data.requestType, eoFreeze.request.flagFormDataToJson, eoFreeze.data.flagFile, params, raw, eoFreeze.request.ContentType, eoFreeze.request.processData, eoFreeze.report.requestType, eoFreeze.data.rawJsonData);
        if (eoFreeze.data.method == 'GET') {
            eoFreeze.report.params = null;
            eoFreeze.request.params = null;
        } else {
            eoFreeze.report.params = midRequestParams.report;
            eoFreeze.request.params = midRequestParams.request;
        }
        headers = midRequestParams.headers;
        eoFreeze.request.processData = midRequestParams.processData;
        eoFreeze.request.ContentType = midRequestParams.ContentType;
        eoFreeze.report.requestType = midRequestParams.reportType;
        url = _requestUtils.HANDLE_URL.handleProtocol(url, eoFreeze.data.httpHeader);

        errorBackResult = {
            webInfo: webInfo,
            type: 'batch',
            connect: batch,
            request: eoFreeze.request,
            backResult: backResult,
            report: eoFreeze.report,
            data: eoFreeze.data,
            allRequestHeaders: allRequestHeaders,
            errorRequestFlagArr: errorRequestFlagArr,
            url: url,
            k: k,
            errorReason: "",
            eoData: eoData
        };

        var headerResult = _requestUtils.HANDLE_HEADER.isLegal(headers);
        eoData.array.push({
            headers: headers,
            apiUrl: url,
            auth: eoFreeze.data.auth
        });
        if (k == caseLen - 1) {
            for (i = 0; i < errorRequestFlagArr.length; i++) {
                if (typeof errorRequestFlagArr[i] == 'number') {
                    for (j = i + 1; j < errorRequestFlagArr.length; j++) {
                        if (typeof errorRequestFlagArr[j] == 'number') {
                            errorRequestFlagArr[i] = errorRequestFlagArr[i] + errorRequestFlagArr[j];
                            errorRequestFlagArr[j] = undefined;
                        } else {
                            break;
                        }
                    }
                } else {
                    continue;
                }
            }
        }
        if (headerResult.error == true) {
            eoFreeze.report.errorReason = handleErrorReason(headerResult.errorReason, eoFreeze.report.errorReason);
            errorBackResult.errorReason = eoFreeze.report.errorReason;
            _commonUtils.COMMON_TOOLS.postError(errorBackResult);
            return 'continue';
        }
        if (eoFreeze.data.error) {
            errorBackResult.errorReason = eoFreeze.report.errorReason;
            _commonUtils.COMMON_TOOLS.postError(errorBackResult);
            return 'continue';
        }
        if (eoFreeze.data.method == 'GET') {
            eoFreeze.request.ContentType = false;
        }
        Ajax = $.ajax({
            url: url,
            traditional: true,
            beforeSend: function beforeSend(request) {

                this.beforeTime = new Date();
                this.eolinkerk = k;

                this.matchRule = webInfo.caseList[k].matchRule;
                this.requestRedirect = webInfo.caseList[k].advancedSetting && webInfo.caseList[k].advancedSetting.requestRedirect == 0 ? false : true;
                this.matchType = webInfo.caseList[k].matchType;
                this.statuCode = webInfo.caseList[k].statusCode;
                this.Url = url;
                this.requestType = eoFreeze.request.requestType;
                this.reportParams = eoFreeze.report.params;
                this.method = eoFreeze.data.method;
                this.errorReason = eoFreeze.report.errorReason;
                this.afterScript = eoFreeze.data.afterScript;
                this.error = eoFreeze.data.error;
                var allHeaders = {};
                this.eo = eoFreeze.data.eo;
                for (var i = eoFreeze.data.headers.length - 1; i >= 0; i--) {
                    allHeaders[eoFreeze.data.headers[i].headerName] = eoFreeze.data.headers[i].headerValue;
                }
                this.headers = allHeaders;
            },
            processData: eoFreeze.request.processData,
            contentType: eoFreeze.request.ContentType,
            type: eoFreeze.data.method,
            async: true,
            data: eoFreeze.request.params
        }).done(function (successData, textStatus, xhr) {
            eoFreeze.response.whichXhr = 'success';
        }).fail(function (xhr, textStatus) {
            eoFreeze.response.whichXhr = 'error';
        }).always(function (successData, textStatus, jqXHR) {
            if (_trans.TRANS.disconnect.batchTest) return;
            var id = this.eolinkerk;
            var eo = this.eo;
            if (textStatus == 'abort') {
                if (webInfo.index != 0) {

                    backResult.responseList[webInfo.index - 1] = null;
                } else {
                    backResult.responseList[id] = null;
                }
            } else {
                var matchType = this.matchType;
                var matchRule = this.matchRule;
                var apiUrl = this.Url;
                var method = this.method;
                var headers = this.headers;

                var matchStatusCode = this.statuCode;
                var requestType = this.requestType;
                var errorReason = this.errorReason;
                var error = this.error;
                var Script = this.afterScript;
                var reportParams = this.reportParams;
                var requestRedirect = this.requestRedirect;

                var isMatch = true;

                var xhr;
                if (eoFreeze.response.whichXhr == 'success') {
                    xhr = jqXHR;
                } else {
                    xhr = successData;
                }
                var responseListID = 0;
                if (webInfo.index != 0) {
                    responseListID = webInfo.index - 1;
                } else {
                    responseListID = id;
                }
                var statusCode = xhr.status;
                var responseText = xhr.responseText;
                if (!requestRedirect && AllRequestInfo.redirectObj[AllRequestInfo.apiLocation[id]]) {
                    var detailsInfo = AllRequestInfo[AllRequestInfo.apiLocation[id]];
                    var requestInfo = detailsInfo[0];
                    statusCode = requestInfo.statusCode;
                    apiUrl = requestInfo.url;
                    allRequestHeaders[id] = requestInfo.requestHeaders;
                    allResponseHeaders[id] = requestInfo.responseHeaders;
                    eoFreeze.request.historyHeaders = requestInfo.historyRequestHeaders;
                    reportParams = '';
                    responseText = '';
                    isMatch = true;
                    testDeny = requestInfo.testTime - this.beforeTime;
                    errorReason = [];
                }
                if (statusCode != 0 && error == false) {

                    var afterResult = _injectCode.INJECT_CODE.evalAfterScript(Script, responseText, env, eo);
                    if (afterResult.error) {
                        error = true;
                        errorReason = handleErrorReason(afterResult.errorReason, errorReason);
                    } else {
                        responseText = afterResult.response;

                        env = afterResult.env;
                    }
                    var parseBody = responseText;
                    try {
                        if (typeof responseText != 'string') {
                            responseText = (0, _stringify2.default)(responseText);
                            if ((0, _stringify2.default)(JSON.parse(xhr.responseText)) == responseText) {
                                responseText = xhr.responseText;
                            }
                        } else {
                            parseBody = JSON.parse(responseText);
                        }
                    } catch (e) {};

                    if (error == true) {
                        isMatch = false;
                    } else {
                        if (matchType == 2) {

                            isMatch = true;
                        } else {
                            if (statusCode == matchStatusCode) {
                                if (matchType == 0) {

                                    if (responseText == matchRule) {
                                        isMatch = true;
                                    } else {
                                        isMatch = false;
                                        errorReason = handleErrorReason(_constant.CONSTANT.LANG.Match.all[_cache.PRODUCT_INFO.lang], errorReason);
                                    }
                                } else if (matchType == 1) {

                                    try {
                                        var patt = new RegExp(matchRule);
                                        isMatch = patt.test(responseText);
                                        if (!isMatch) {
                                            errorReason = handleErrorReason(_constant.CONSTANT.LANG.Match.patt[_cache.PRODUCT_INFO.lang], errorReason);
                                        }
                                    } catch (e) {
                                        isMatch = false;
                                        errorReason = handleErrorReason(_constant.CONSTANT.LANG.PattError[_cache.PRODUCT_INFO.lang], errorReason);
                                    }
                                } else if (matchType == 3) {
                                    var match = matchRule;
                                    var _result = _commonUtils.COMMON_TOOLS.selfLoopMatchJson(match, parseBody);
                                    isMatch = _result.isMatch;
                                    if (!isMatch) errorReason = handleErrorReason(_result.errorReason, errorReason);
                                } else if (matchType == 4) {
                                    var _match = matchRule;

                                    try {
                                        var json = $.xml2json(responseText);
                                        var result = _commonUtils.COMMON_TOOLS.selfLoopMatchJson(_match, json);
                                        if (!result.isMatch) {
                                            isMatch = false;
                                            errorReason = handleErrorReason(result.errorReason, errorReason);
                                        }
                                    } catch (e) {
                                        console.log('xml:', e);
                                        if (e) {
                                            isMatch = false;
                                            errorReason = handleErrorReason(_constant.CONSTANT.LANG.XmlError[_cache.PRODUCT_INFO.lang], errorReason);
                                        }
                                    }
                                }
                            } else {
                                isMatch = false;
                                errorReason = handleErrorReason(_commonUtils.COMMON_TOOLS.handleTip(_constant.CONSTANT.LANG.Match.statusCode[_cache.PRODUCT_INFO.lang], [matchStatusCode, xhr.status]), errorReason);
                            }
                        }
                    }
                    var testDeny = new Date(),
                        testDeny = testDeny - this.beforeTime;
                } else {
                    isMatch = false;
                }
                isMatch = isMatch ? "success" : 'error';
                backResult.responseList[responseListID] = {
                    general: {
                        requestUrl: apiUrl,
                        requestMethod: method,
                        statusCode: statusCode,
                        time: testDeny + 'ms'
                    },
                    responseHeaders: (0, _stringify2.default)(allResponseHeaders[id]) == '{}' ? null : allResponseHeaders[id],
                    requestHeaders: (0, _stringify2.default)(allRequestHeaders[id]) == '{}' ? null : allRequestHeaders[id],
                    requestBody: {
                        requestType: requestType,
                        body: reportParams
                    },
                    response: responseText,
                    responseType: isMatch,
                    errorReason: errorReason
                };
            }
            if (eoData.nowApiCount == caseLen - 1) {
                chrome.webRequest.onBeforeSendHeaders.removeListener(_trans.TRANS.fun.handleRequestHeaders);
                chrome.webRequest.onHeadersReceived.removeListener(_trans.TRANS.fun.getResponseHeaders);
            }
            if (!_trans.TRANS.disconnect.batchTest) {
                eoData.nowApiCount++;
                batch.postMessage(backResult);
            }
        });

        if (webInfo.index == 0) {
            _trans.TRANS.ajaxs[k] = Ajax;
        } else {
            _trans.TRANS.ajaxs[webInfo.index - 1] = Ajax;
        }
    };

    for (var k = 0; k < caseLen; k++) {
        var data;
        var eoFreeze;
        var env;
        var url, params, headers, query, raw, rest;
        var response;
        var beforeResult;
        var errorBackResult;
        var i;
        var j;
        var Ajax;

        var _ret = _loop();

        if (_ret === 'continue') continue;
    }
};

/***/ }),
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(128), __esModule: true };

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(129);
module.exports = __webpack_require__(0).Object.freeze;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {


var isObject = __webpack_require__(7);
var meta = __webpack_require__(66).onFreeze;

__webpack_require__(65)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(131), __esModule: true };

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(132);
module.exports = __webpack_require__(0).Object.values;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {


var $export = __webpack_require__(4);
var $values = __webpack_require__(64)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ })
],[75]);